# WLANderlust
#
# Captive Portal functions
# https://en.wikipedia.org/wiki/Captive_portal
#
# Rogier van Staveren, January 2019, initial release

# Append default Captive Portal configuration to default configuration
if ! grep -q "^# Captive Portal detection" <<< "$DEFAULTCONFIG"; then
	DEFAULTCONFIG+="

PASSWORDSFILE=''
CAPTIVEPORTALEMAIL=''

# Captive Portal detection
CAPTIVEPORTALLOGGING='false'
CAPTIVEPORTALLOGPATH=''
# The Android way:
CAPTIVEPORTALDETECTIONURL='http://google.com/generate_204'
CAPTIVEPORTALDETECTIONRESPONSE='^HTTP/1.1 204 No Content'
#CAPTIVEPORTALDETECTIONURL='http://connectivitycheck.gstatic.com/generate_204'
#CAPTIVEPORTALDETECTIONRESPONSE='^HTTP/1.1 204 No Content'
# The Apple way:
#CAPTIVEPORTALDETECTIONURL='http://captive.apple.com/'
#CAPTIVEPORTALDETECTIONRESPONSE='^<HTML><HEAD><TITLE>Success</TITLE></HEAD><BODY>Success</BODY></HTML>'
# The Microsoft way:
#CAPTIVEPORTALDETECTIONURL='http://www.msftncsi.com/ncsi.txt'
#CAPTIVEPORTALDETECTIONRESPONSE='^Microsoft NCSI'"
fi

DEFAULTPASSWORDSFILE="$CONFIGPATH/WLANderlust.passwd"
if ! $ROOT; then
	DEFAULTPASSWORDSFILE=~/'.WLANderlust.passwd'
fi
[ -z "$PASSWORDSFILE" ] && PASSWORDSFILE=`getConfigValue 'PASSWORDSFILE' "$DEFAULTPASSWORDSFILE"`
[ -z "$CAPTIVEPORTALLOGGING" ] && CAPTIVEPORTALLOGGING=`getConfigValue 'CAPTIVEPORTALLOGGING'`
[ -z "$CAPTIVEPORTALLOGPATH" ] && CAPTIVEPORTALLOGPATH=`getConfigValue 'CAPTIVEPORTALLOGPATH'`
"$CAPTIVEPORTALLOGGING" && [ ! -d "$CAPTIVEPORTALLOGPATH" ] && mkdir -p "$CAPTIVEPORTALLOGPATH"
[ -z "$CAPTIVEPORTALDETECTIONURL" ] && CAPTIVEPORTALDETECTIONURL=`getConfigValue 'CAPTIVEPORTALDETECTIONURL'`
# Derive the Captive Portal detection hostname from the Captive Portal detection URL
CAPTIVEPORTALDETECTIONHOSTNAME=`sed 's|^.*//\([^/]*\).*$|\1|' <<< "$CAPTIVEPORTALDETECTIONURL"`
[ -z "$CAPTIVEPORTALDETECTIONRESPONSE" ] && CAPTIVEPORTALDETECTIONRESPONSE=`getConfigValue 'CAPTIVEPORTALDETECTIONRESPONSE'`

[ -z "$1" ] &&
	return

# The Captive Portal password list has the following format:
# YYYYMMDDhhmmss;BSSID;"SSID";"domain";latitude;longitude;share;"username";"password"
# The time the entry was added
# The BSSID field should be a valid BSSID
# The SSID field is currently not allowed to contain the charachter ;
# The domain field should be a valid domain name
# The latitude
# The longitude
# The share field is reserved for future functionality and 
# The username field is currently not allowed to contain the charachter ;
# The password field is allowed to contain any character

# Gets the Captive Portal username, if any, from the Captive Portal password list
# $1 = BSSID
# $2 = SSID
# $3 = hostname or URL
# $4 = latitude
# $5 = longitude
# latitude and longitude are currently ignored
getCaptivePortalUsername()
{
	if [ ! -f "$PASSWORDSFILE" ]; then
		logError "Passwords file '$PASSWORDSFILE' does not exist"
		return 1
	fi

	# Incase an URL has been provided, take the domain part
	if grep -iq "^[a-z]*://" <<< "$3"; then
		_DOMAINNAME=`sed 's|^[a-z]*://\([^/]*\)/.*|\1|I' <<< "$3"`
	else
		_DOMAINNAME="$3"
	fi
	# Escape sed special characters
	_SSID=`sed -e 's/[]\/$*.^[]/\\\&/g' <<< "$2"`
	_DOMAINNAME=`sed -e 's/[]\/$*.^[]/\\\&/g' <<< "$_DOMAINNAME"`

	if _ENTRY=`sed -n "s/^\([^;]*;\"$1\";.*\|[^;]*;;\"$_SSID\";.*\|[^;]*;;;\"$_DOMAINNAME\";.*\)$/\1/p" "$PASSWORDSFILE" | tail -n 1` && [ ! -z "$_ENTRY" ]; then
		sed -n 's|^[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;"\([^;]*\)";.*$|\1|p' <<< "$_ENTRY"
		return 0
	fi

	return 1
}

# Gets the Captive Portal password, if any, from the Captive Portal password list
# $1 = BSSID
# $2 = SSID
# $3 = hostname or URL
# $4 = latitude
# $5 = longitude
# latitude and longitude are currently ignored
getCaptivePortalPassword()
{
	if [ ! -f "$PASSWORDSFILE" ]; then
		logError "Passwords file '$PASSWORDSFILE' does not exist"
		return 1
	fi

	# Incase an URL has been provided, take the domain part
	if grep -iq "^[a-z]*://" <<< "$3"; then
		_DOMAINNAME=`sed 's|^[a-z]*://\([^/]*\)/.*|\1|I' <<< "$3"`
	else
		_DOMAINNAME="$3"
	fi
	# Escape sed special characters
	_SSID=`sed -e 's/[]\/$*.^[]/\\\&/g' <<< "$2"`
	_DOMAINNAME=`sed -e 's/[]\/$*.^[]/\\\&/g' <<< "$_DOMAINNAME"`

	if _ENTRY=`sed -n "s/^\([^;]*;\"$1\";.*\|[^;]*;;\"$_SSID\";.*\|[^;]*;;;\"$_DOMAINNAME\";.*\)$/\1/p" "$PASSWORDSFILE" | tail -n 1` && [ ! -z "$_ENTRY" ]; then
		sed -n 's|^[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;"\(.*\)"$|\1|p' <<< "$_ENTRY"
		return 0
	fi

	return 1
}

# $1 = BSSID
# $2 = SSID
# $3 = hostname or URL
# $4 = latitude
# $5 = longitude
# $6 = username
# $7 = password
setCaptivePortalCredentials()
{
	# Incase an URL has been provided, take the domain part
	if grep -iq "^[a-z]*://" <<< "$3"; then
		_DOMAINNAME=`sed 's|^[a-z]*://\([^/]*\)/.*|\1|I' <<< "$3"`
	else
		_DOMAINNAME="$3"
	fi
	_USERNAME="$6"
	_PASSWORD="$7"

	if [ ! -f "$PASSWORDSFILE" ]; then
		if touch "$PASSWORDSFILE"; then
			chmod 0600 "$PASSWORDSFILE"
			cat << EOF > "$PASSWORDSFILE"
# The WLANderlust passwords file has the following format:
# YYYYMMDDhhmmss;BSSID;"SSID";"domain";latitude;longitude;share;"username";"password"
# The time the entry was added
# The BSSID field should be a valid BSSID
# The SSID field is currently not allowed to contain the charachter ;
# The domain field should be a valid domain name
# The latitude is reserved for future functionality
# The longitude is reserved for future functionality
# The share field is reserved for future functionality
# The username field is currently not allowed to contain the charachter ;
# The password field is allowed to contain any character
EOF
		else
			logError 'Unable to create WLANderlust passwords file'
			return 1
		fi
	fi

	_ENTRY="$TIMESTAMP;"
	[ ! -z "$1" ] && _ENTRY="$1"
	_ENTRY+=';'
	[ ! -z "$2" ] && _ENTRY+="\"$2\""
	_ENTRY+=';'
	[ ! -z "$_DOMAINNAME" ] && _ENTRY+="\"$_DOMAINNAME\""
	_ENTRY+=';'
	[ ! -z "$4" ] && _ENTRY+="$4"
	_ENTRY+=';'
	[ ! -z "$5" ] && _ENTRY+="$5"
	_ENTRY+=";N;"
	[ ! -z "$_USERNAME" ] && _ENTRY+="\"$_USERNAME\""
	_ENTRY+=';'
	[ ! -z "$_PASSWORD" ] && _ENTRY+="\"$_PASSWORD\""
	echo "$_ENTRY" >> "$PASSWORDSFILE"

	unset _DOMAINNAME
	unset _USERNAME
	unset _PASSWORD
	unset _ENTRY
	
	return 0
}

checkCaptivePortalPresence()
{
	# Checks for the existence of a Captive Portal
	# Returns 0 if Captive Portal is present, else 1

	if ! $INTERFACEISUP ||
		($ISWIFIINTERFACE && [ "$WPASTATE" != 'COMPLETED' ]) ||
		[ -z "$IPADDRESS" ]; then
		logError "Interface $INTERFACE is not connected"
		LOCATION=''
		BODY=''
		setState 'CAPTIVEPORTALTYPE' 'unknown'
		setState 'CAPTIVEPORTALSTATE' 'unknown'
		return 1
	fi

	if [ "$PREVIOUSBSSID" = "$BSSID" ]; then
		CAPTIVEPORTALTYPE=`getState 'CAPTIVEPORTALTYPE'`
		CAPTIVEPORTALSTATE=`getState 'CAPTIVEPORTALSTATE'`
	else
		setState 'CAPTIVEPORTALTYPE' 'unknown'
		setState 'CAPTIVEPORTALSTATE' 'unknown'
	fi

	if [ "$IPOVERDNSSTATE" != 'stopped' ] || [ "$VPNSTATE" != 'stopped' ]; then
		# If IP over DNS tunneling or VPN is active we use the previus state
		if [ "$CAPTIVEPORTALSTATE" = 'none' ]; then
			logMessage 'No Captive Portal is present'
		elif [ "$CAPTIVEPORTALSTATE" = 'solved' ]; then
			logMessage 'Captive Portal is solved'
		elif [ "$CAPTIVEPORTALSTATE" = 'present' ]; then
			logMessage 'Captive Portal is present'
		elif [ "$CAPTIVEPORTALSTATE" = 'failure' ]; then
			logMessage 'Captive Portal failure'
		fi
		return 1
	fi

	$INTERACTIVE && echo -n 'Detecting Captive Portal'

	$INTERACTIVE && echo -n '.'
	if ! host -t A -W $TIMEOUT "$CAPTIVEPORTALDETECTIONHOSTNAME" > /dev/null; then
		$INTERACTIVE && echo -n ' '
		logError "Captive portal detection hostname $CAPTIVEPORTALDETECTIONHOSTNAME could not be resolved"
		if [ "$PREVIOUSBSSID" != "$BSSID" ]; then
			setState 'CAPTIVEPORTALSTATE' 'failure'
		fi
		storeState
		return 1
	fi

	rm -f "$COOKIEJAR"
	BODYLOGFILECOUNTER='1'
	#if $INTERACTIVE && echo -n '.'; ! BODY=`curl --interface "$INTERFACE" -m "$TIMEOUT" -s -i "$CAPTIVEPORTALDETECTIONURL"`; then
	#	logError "Failed to retrieve '$CAPTIVEPORTALDETECTIONURL'"
	if $INTERACTIVE && echo -n '.'; ! curlGet "$CAPTIVEPORTALDETECTIONURL"; then
		# An error message is already logged in the curlGet function
		if [ "$PREVIOUSBSSID" != "$BSSID" ]; then
			setState 'CAPTIVEPORTALSTATE' 'failure'
		fi
	elif $INTERACTIVE && echo -n '.'; [ -z "$BODY" ]; then
		# Failure
		$INTERACTIVE && echo -n ' '
		logError "Empty body when detecting captive portal"
		if [ "$PREVIOUSBSSID" != "$BSSID" ]; then
			setState 'CAPTIVEPORTALSTATE' 'failure'
		fi
	elif $INTERACTIVE && echo -n '.'; grep -q "$CAPTIVEPORTALDETECTIONRESPONSE" <<< "$BODY"; then
		# No Captive portal
		! $INTERACTIVE && $VERBOSELOGGING && logMessage "No captive portal detected"
		if [ "$PREVIOUSBSSID" = "$BSSID" ] && [ ! -z "$CAPTIVEPORTALTYPE" ] &&
			[ "$CAPTIVEPORTALTYPE" != 'none' ] && [ "$CAPTIVEPORTALTYPE" != 'unknown' ]; then
			setState 'CAPTIVEPORTALSTATE' 'solved'
			$INTERACTIVE && echo " $CAPTIVEPORTALTYPE, Solved"
		else
			setState 'CAPTIVEPORTALTYPE' 'none'
			setState 'CAPTIVEPORTALSTATE' 'none'
			$INTERACTIVE && echo ' None'
		fi

		if $CAPTIVEPORTALLOGGING; then
			rm "$CAPTIVEPORTALLOGPATH/CaptivePortal$TIMESTAMP-"*.log
		fi
	else
		# Captive portal present
		logMessage 'Captive Portal present'

		#LOCATION="$CAPTIVEPORTALDETECTIONURL"
		getLocationHeader "$BODY" && [ ! -z "$LOCATION" ] &&
			! $INTERACTIVE && $VERBOSELOGGING && logMessage "Captive Portal location: \"$LOCATION\""

		if $INTERACTIVE && echo -n '.'; [ "$PREVIOUSBSSID" != "$BSSID" ] || [ -z "$CAPTIVEPORTALTYPE" ] ||
			[ "$CAPTIVEPORTALTYPE" = 'none' ]; then
			setState 'CAPTIVEPORTALTYPE' 'unknown'
		fi
		setState 'CAPTIVEPORTALSTATE' 'present'
		storeState
		return 0
	fi

	storeState
	return 1
}

case "$1" in
	'CONFIGURE')
		AUTOSOLVECAPTIVEPORTAL=`getConfigValue 'AUTOSOLVECAPTIVEPORTAL'`
		while true; do
			CONFIGURABLECAPTIVEPORTALS=()
			CONFIGUREDCAPTIVEPORTALS=()
			for SCRIPTNAME in $(run-parts --list "$LIBPATH/captiveportal.d"); do
				HASCONFIG='false'
				. "$SCRIPTNAME" ''
				$HASCONFIG &&
					CONFIGURABLECAPTIVEPORTALS+=(`basename "$SCRIPTNAME"`)
				$ISCONFIGURED &&
					CONFIGUREDCAPTIVEPORTALS+=(`basename "$SCRIPTNAME"`)
			done
			SCRIPTNAME="$0"

			! $VERBOSELOGGING && clear
			echo -e '\e[2mNot all those who WLANder have lost connection\e[0m'
			echo 'Captive Portal Configuration Menu'
			echo
			for I in ${!CONFIGURABLECAPTIVEPORTALS[@]}; do
				SCRIPTNAME="$LIBPATH/captiveportal.d/${CONFIGURABLECAPTIVEPORTALS[$I]}"
				CAPTIVEPORTALNAME=''
				. "$SCRIPTNAME" ''
				SCRIPTNAME="$0"
				echo -e "  \e[1m$I\e[0m Configure $CAPTIVEPORTALNAME"
			done
			SCRIPTNAME="$0"
			$AUTOSOLVECAPTIVEPORTAL &&
				echo -e "  \e[1mS\e[0m Don't automatically \e[1ms\e[0molve Captive Portals" ||
				echo -e '  \e[1mS\e[0m Automatically \e[1ms\e[0molve Captive Portals'
			echo -e '  \e[1mB\e[0m \e[1mB\e[0mack to main menu'
			echo

			if read -p 'Captive Portal to configure or option: '; then
				case "$REPLY" in
					S|s)
						$AUTOSOLVECAPTIVEPORTAL &&
							AUTOSOLVECAPTIVEPORTAL='false' ||
							AUTOSOLVECAPTIVEPORTAL='true'
						setConfigValue 'AUTOSOLVECAPTIVEPORTAL' "$AUTOSOLVECAPTIVEPORTAL"
						storeConfig
						;;
					B|b) break ;;
					*)
						if echo -n "$REPLY" | egrep -q "^[0-9]+$" && [ ! -z "${CONFIGURABLECAPTIVEPORTALS[$REPLY]}" ]; then
							echo
							SCRIPTNAME="$LIBPATH/captiveportal.d/${CONFIGURABLECAPTIVEPORTALS[$REPLY]}"
							if . "$SCRIPTNAME" 'CONFIGURE'; then
								storeConfig
							fi
							SCRIPTNAME="$0"
						else
							echo 'Invalid input'
						fi
						;;
				esac
			fi
		done
		;;
	'SOLVE')
		if $INTERFACEISUP && (! $ISWIFIINTERFACE || [ "$WPASTATE" = 'COMPLETED' ]) && [ ! -z "$IPADDRESS" ]; then
			if [ "$PREVIOUSBSSID" = "$BSSID" ]; then
				CAPTIVEPORTALTYPE=`getState 'CAPTIVEPORTALTYPE'`
				CAPTIVEPORTALSTATE=`getState 'CAPTIVEPORTALSTATE'`
			else
				setState 'CAPTIVEPORTALTYPE' 'unknown'
				setState 'CAPTIVEPORTALSTATE' 'unknown'
			fi

			if [ "$IPOVERDNSSTATE" != 'stopped' ] || [ "$VPNSTATE" != 'stopped' ]; then
				if [ "$CAPTIVEPORTALSTATE" = 'none' ]; then
					logMessage 'No Captive Portal is present'
				elif [ "$CAPTIVEPORTALSTATE" = 'solved' ]; then
					logMessage 'Captive Portal is solved'
				elif [ "$CAPTIVEPORTALSTATE" = 'present' ]; then
					logMessage 'Captive Portal is present'
				elif [ "$CAPTIVEPORTALSTATE" = 'failure' ]; then
					logMessage 'Captive Portal failure'
				fi
				return 1
			fi

			if [ -z "$CAPTIVEPORTALSTATE" ] || ([ "$CAPTIVEPORTALSTATE" != 'none' ] && [ "$CAPTIVEPORTALSTATE" != 'solved' ]); then
				$INTERACTIVE && echo -n 'Solving Captive Portal'

				getLocationHeader "$BODY" && [ ! -z "$LOCATION" ] &&
					! $INTERACTIVE && $VERBOSELOGGING && logMessage "Captive Portal location: \"$LOCATION\""

				[ ! -z "$LOCATION" ] &&
					getBody "$LOCATION" true

				if [ -z "$BODY" ]; then
					# Failure
					logError 'Empty body when retreiving Captive Portal'
					setState 'CAPTIVEPORTALSTATE' 'failure'
					storeState

					return 1
				else
					! $INTERACTIVE && $VERBOSELOGGING && logMessage 'Captive portal present'
					_OLDCAPTIVEPORTTYPE="$CAPTIVEPORTTYPE"
					CAPTIVEPORTTYPE='unknown'
					CAPTIVEPORTALSTATE='present'

					for SCRIPTNAME in $(run-parts --list "$LIBPATH/captiveportal.d"); do
						. "$SCRIPTNAME" SOLVE
						[ "$CAPTIVEPORTTYPE" != 'unknown' ] &&
							break
						[ "$CAPTIVEPORTALSTATE" = 'solved' ] &&
							break
					done
					SCRIPTNAME="$0"

					[ "$CAPTIVEPORTTYPE" = 'unknown' ] &&
						CAPTIVEPORTTYPE="$_OLDCAPTIVEPORTTYPE"

					setState 'CAPTIVEPORTALTYPE' "$CAPTIVEPORTALTYPE"
					setState 'CAPTIVEPORTALSTATE' "$CAPTIVEPORTALSTATE"
					storeState

					return 0
				fi
			else
				# No Captive portal
				$VERBOSELOGGING && logMessage 'No Captive portal'
				if $CAPTIVEPORTALLOGGING; then
					rm "$CAPTIVEPORTALLOGPATH/CaptivePortal$TIMESTAMP-"*.log
				fi

				return 0
			fi
		fi
		;;
	'STATE')
		checkCaptivePortalPresence &&
			return 0
		return 1
		;;
esac

return 1
