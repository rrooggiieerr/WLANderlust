# WLANderlust
#
# SSH tunnel VPN script
#
# Rogier van Staveren, January 2019, initial release

VPNNAME='SSH tunnel'

# Append default SSH tunnel configuration to default configuration
if ! grep -q "^SSHTUNNELSERVERHOSTNAME=" <<< "$DEFAULTCONFIG"; then
         DEFAULTCONFIG="$DEFAULTCONFIG
SSHTUNNELSERVERHOSTNAME=''
SSHTUNNELUSERNAME=''"
fi

[ -z "$SSHTUNNELSERVERHOSTNAME" ] && SSHTUNNELSERVERHOSTNAME=`getConfigValue 'SSHTUNNELSERVERHOSTNAME'`
[ -z "$SSHTUNNELUSERNAME" ] && SSHTUNNELUSERNAME=`getConfigValue 'SSHTUNNELUSERNAME'`

HASCONFIG='true'
[ ! -z "$SSHTUNNELSERVERHOSTNAME" ] && [ ! -z "$SSHTUNNELUSERNAME" ] &&
	ISCONFIGURED='true' ||
	ISCONFIGURED='false'

SSHTUNNELCTRLSOCKET="/var/run/sshtunnel.$INTERFACE.socket"

case "$1" in
	'CONFIGURE')
		# Ask for VPN server hostname
		while true; do
			read -r -p 'SSH tunnel server hostname: ' -e -i "$SSHTUNNELSERVERHOSTNAME" 'SSHTUNNELSERVERHOSTNAME'
			# Test if hostname can be resolved
			if ! VPNSERVERIPADDRESS=`host -t A -W $TIMEOUT "$SSHTUNNELSERVERHOSTNAME"`; then
				logError "SSH tunnel server hostname $SSHTUNNELSERVERHOSTNAME could not be resolved"
			else
				VPNSERVERIPADDRESS=`sed 's/^.* has address //g' <<< "$VPNSERVERIPADDRESS" | head -n 1`
				if ! nc -s "$VPNBINDIPADDRESS" -4 -w "$TIMEOUT" -z "$VPNSERVERIPADDRESS" 22; then
					logError "Unable to connect to SSH port on VPN server IP address $VPNSERVERIPADDRESS"
				else
					break
				fi
			fi
		done

		read -r -p 'SSH tunnel server username: ' -e -i "$SSHTUNNELUSERNAME" 'SSHTUNNELUSERNAME'
		#ToDo Input validation

		# Generate private key
		if [ ! -f ~/'.ssh/id_rsa' ]; then
			logMessage 'Generating SSH public/private key combo'
			ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N ""
		fi

		logMessage "Your public rsa key, use this to configure your SSH tunnel server $SSHTUNNELSERVERHOSTNAME"
		logMessage `cat ~/'.ssh/id_rsa.pub'`

		# Add server to known_hosts
		#ssh-keyscan -H -4 "$VPNSERVERIPADDRESS" >> ~/.ssh/known_hosts 

		#ToDo Try to install private key on SSH server

		read -r -p 'Test connection (Y/N)? ' -i 'Y'
		case "$REPLY" in
			'Y'|'y')
				logMessage 'Testing SSH tunnel connection'
				. "$SCRIPTNAME" 'START' && . "$SCRIPTNAME" 'STOP' &&
					logMessage 'Success!' ||
					logError 'Failure!'
				;;
		esac

		# Just wait a bit to show the result
		sleep 3

		return 0
		;;
	'START')
		if [ -z "$SSHTUNNELSERVERHOSTNAME" ]; then
			logError 'No SSH tunnel server hostname configured'
			return 1
		elif [ -z "$SSHTUNNELUSERNAME" ]; then
			logError 'No SSH tunnel server username configured'
			return 1
		elif ! VPNSERVERIPADDRESS=`host -t A -W $TIMEOUT "$SSHTUNNELSERVERHOSTNAME"`; then
			logError "SSH tunnel server hostname $SSHTUNNELSERVERHOSTNAME could not be resolved"
			return 1
		else
			setState 'VPNSERVERIPADDRESS' `sed 's/^.* has address //g' <<< "$VPNSERVERIPADDRESS" | head -n 1`

			if ! nc -s "$VPNBINDIPADDRESS" -4 -w "$TIMEOUT" -z "$VPNSERVERIPADDRESS" 22 > /dev/null 2>&1; then
				logError "Unable to connect to SSH port on VPN server IP address $VPNSERVERIPADDRESS"
				return 1
			fi

			# Create TUN interface on host
			if ssh -4 -o "ConnectTimeout=$TIMEOUT" -b "$VPNBINDIPADDRESS" "$SSHTUNNELUSERNAME@$VPNSERVERIPADDRESS" '/sbin/ifconfig tun0 > /dev/null 2>&1 || sudo ip tuntap add mode tun user vpn group vpn tun0'; then
				logMessage "Created TUN interface on SSH tunnel server $SSHTUNNELSERVERHOSTNAME"
			else
				logError "Failed to created TUN interface on SSH tunnel server $SSHTUNNELSERVERHOSTNAME"
				return 1
			fi

			logMessage 'Configuring SSH tunnel'
			VPNINTERFACE=`ifconfig -a | sed -n 's|^tun\([0-9]*\):.*|\1|p' | sort | tail -n 1`
			BODYLOGFILECOUNTER=$(($BODYLOGFILECOUNTER + 1))
			[ ! -z "$VPNINTERFACE" ] &&
				VPNINTERFACE="tun$(($VPNINTERFACE + 1))" ||
				VPNINTERFACE='tun0'
			$DEBUGLOGGING && logMessage "VPNINTERFACE=$VPNINTERFACE"
			setState 'VPNINTERFACE' "$VPNINTERFACE"
			# Check if TUN interface already exists, this is just paranoia
			if ! /sbin/ifconfig "$VPNINTERFACE" > /dev/null 2>&1; then
				if ip tuntap add mode tun "$VPNINTERFACE"; then
					logMessage "Created TUN interface $VPNINTERFACE"
				else
					logError "Failed to create TUN interface $VPNINTERFACE"
					return 1
				fi
			else
				logError "TUN interface $VPNINTERFACE already exists"
				return 1
			fi

			if [ "$IPOVERDNSSTATE" = 'started' ] && ssh -4 -f \
				-M -S "$SSHTUNNELCTRLSOCKET" \
				-o 'PermitLocalCommand=yes' \
				-o "LocalCommand=ifconfig '$VPNINTERFACE' 192.168.244.2 pointopoint 192.168.244.1 netmask 255.255.255.0" \
				-o 'ServerAliveInterval=5' \
				-o "ConnectTimeout=$TIMEOUT" \
				-o "ExitOnForwardFailure=yes" \
				-b "$IPOVERDNSIPADDRESS" \
				-w 0:0 "$SSHTUNNELUSERNAME@$VPNSERVERIPADDRESS" \
				'sudo ifconfig tun0 192.168.244.1 pointopoint 192.168.244.2 netmask 255.255.255.0'; then
				while [ ! -e "$SSHTUNNELCTRLSOCKET" ]; do sleep 0.1; done
				ssh -4 -S "$SSHTUNNELCTRLSOCKET" -O check "$SSHTUNNELUSERNAME@$VPNSERVERIPADDRESS" 2>&1
				logMessage 'Created SSH Tunnel'
			elif ssh -4 -f \
				-M -S "$SSHTUNNELCTRLSOCKET" \
				-o 'PermitLocalCommand=yes' \
				-o "LocalCommand=ifconfig '$VPNINTERFACE' 192.168.244.2 pointopoint 192.168.244.1 netmask 255.255.255.0" \
				-o 'ServerAliveInterval=5' \
				-o "ConnectTimeout=$TIMEOUT" \
				-b "$VPNBINDIPADDRESS" \
				-o "ExitOnForwardFailure=yes" \
				-w 0:0 "$SSHTUNNELUSERNAME@$VPNSERVERIPADDRESS" \
				'sudo ifconfig tun0 192.168.244.1 pointopoint 192.168.244.2 netmask 255.255.255.0'; then
				while [ ! -e "$SSHTUNNELCTRLSOCKET" ]; do sleep 0.1; done
				ssh -4 -S "$SSHTUNNELCTRLSOCKET" -O check "$SSHTUNNELUSERNAME@$VPNSERVERIPADDRESS" 2>&1
				logMessage 'Created SSH Tunnel'
			else
				logError 'Failed to create SSH Tunnel'
				return 1
			fi

			VPNSERVERHOSTNAME="$SSHTUNNELSERVERHOSTNAME"
			setState 'VPNGATEWAY' '192.168.244.1'
			$DEBUGLOGGING && logMessage "VPNINTERFACE=$VPNINTERFACE"
			return 0
		fi
		;;
	'STOP')
		if [ -e "$SSHTUNNELCTRLSOCKET" ]; then
			VPNINTERFACE=`getState 'VPNINTERFACE'`
			VPNSERVERIPADDRESS=`getState 'VPNSERVERIPADDRESS'`

			logMessage 'Stopping SSH tunnel'

			if ssh -4 -S "$SSHTUNNELCTRLSOCKET" -O exit "$SSHTUNNELUSERNAME@$VPNSERVERIPADDRESS"; then
				logMessage 'SSH tunnel stopped'
			else
				logError "Failed to stop SSH tunnel"
				setState 'VPNSTATE' 'failure'
				return 1
			fi
		fi

		if [ ! -z "$VPNINTERFACE" ] && ifconfig "$VPNINTERFACE" > /dev/null 2>&1; then
			# Remove local TUN interface
			$VERBOSELOGGING && logMessage "Remove local TUN interface $VPNINTERFACE"
			if ip tuntap del mode tun "$VPNINTERFACE"; then
				$VERBOSELOGGING && logMessage "Local TUN interface $VPNINTERFACE removed"
			else
				logError "Failed to remove local TUN interface $VPNINTERFACE"
				setState 'VPNSTATE' 'failure'
				return 1
			fi
		fi

		setState 'VPNSTATE' 'stopped'
		return 0
		;;
	'STATE')
		if [ "$VPNSTATE" = 'started' ] && [ ! -e "$SSHTUNNELCTRLSOCKET" ]; then
			setState 'VPNSTATE' 'failure'
		elif [ "$VPNSTATE" = 'started' ] && ! ssh -4 -S "$SSHTUNNELCTRLSOCKET" -O check "$SSHTUNNELUSERNAME@$VPNSERVERIPADDRESS" 2>&1; then
			setState 'VPNSTATE' 'failure'
		elif [ "$VPNSTATE" = 'started' ]; then
			return 0
		fi

		return 1
		;;
esac
