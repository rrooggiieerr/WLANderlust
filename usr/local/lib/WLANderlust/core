#!/bin/bash
#
# WLANderlust
#
# Rogier van Staveren, February 2019, initial release

# Apparently the iw command is more future and feature proof, however this
# script currently uses the iwlist command to retrieve the WiFi details
USEIW='false'

logMessage()
{
	[[ -t 1 || -p /dev/stdin ]] &&
		echo "$@"
	[ ! -z "$LOGFILE" ] && [ "$LOGFILE" != '/dev/stdout' ] &&
		echo "`date` $INTERFACE $SCRIPTNAME $@" >> "$LOGFILE"
}

logError()
{
	[[ -t 1 || -p /dev/stdin ]] &&
		# Set text color to bold red
		echo -e "\x1B[1m\x1B[31m$@\x1B[0m" > /dev/stderr
	[ ! -z "$LOGFILE" ] && [ "$LOGFILE" != '/dev/stdout' ] &&
		echo "`date` $INTERFACE $SCRIPTNAME $@" >> "$LOGFILE"
}

# macOS compatibility
if ! which realpath > /dev/null; then
	realpath() {
		[[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
	}
fi
if ! which md5sum > /dev/null; then
	md5sum() {
		[ -z "$1" ] &&
			md5 ||
			md5 "$1"
	}
fi

# Are we root?
[ "$(id -u)" -eq 0 ] &&
	ROOT='true' ||
	ROOT='false'

# Some default settings
DEFAULTCONFIGPATH='/etc/WLANderlust'
! $ROOT && DEFAULTCONFIGPATH=~/
[ -z "$CONFIGPATH" ] && CONFIGPATH="$DEFAULTCONFIGPATH"
DEFAULTCONFIGFILE="$CONFIGPATH/WLANderlust.conf"
! $ROOT && DEFAULTCONFIGFILE=~/'.WLANderlust.conf'
[ -z "$CONFIGFILE" ] && CONFIGFILE="$DEFAULTCONFIGFILE"

DEFAULTLOGPATH='/var/log'
! $ROOT && DEFAULTLOGPATH=~/

DEFAULTCONFIG="LOGPATH='$DEFAULTLOGPATH'
COOKIEJAR=''
LOGFILE=''
GPSFILE=''

AUTOSWITCHHOSTAPCHANNEL='false'
AUTOREASSOCIATE='false'
REASSOCIATEINTERVAL='120'

VERBOSELOGGING='false'
DEBUGLOGGING='false'
SHOWPASSWORDS='false'

TIMEOUT='5'

WHATISMYIPURL='https://api.ipify.org'

WIGLEAPINAME=''
WIGLEAPITOKEN=''"

readConfig()
{
	# Load the WLANderlust configuration file
	[ -z "$CONFIG" ] && [ -f "$CONFIGFILE" ] &&
		CONFIG=`cat "$CONFIGFILE"`
}

# $1 key
# $2 default value
getConfigValue()
{
	readConfig

	# Lookup key value in the configuration
	VALUE=`sed -n "s|^$1=['\"]\{0,1\}\([^'\"]*\)['\"]\{0,1\}$|\1|p" <<< "$CONFIG" | tail -n 1`
	# If value is empty lookup the key value in the default configuration
	[ -z "$VALUE" ] && VALUE=`sed -n "s|^$1=['\"]\{0,1\}\([^'\"]*\)['\"]\{0,1\}$|\1|p" <<< "$DEFAULTCONFIG" | tail -n 1`
	# If value is empty use the default value
	[ -z "$VALUE" ] && VALUE="$2"

	echo "$VALUE"
}

# $1 key
# $2 value
setConfigValue()
{
	readConfig

	# Check if configuration key is already set
	if grep -q "^$1=" <<< "$CONFIG"; then
		# If configuration key is set, update value
		# Escape sed special characters
		_KEY=`sed -e 's/[]\/$*.^[]/\\\&/g' <<< "$1"`
		_VALUE=`sed -e 's/[\/&]/\\\&/g' <<< "$2"`
		CONFIG=`sed "s|^\($_KEY\)=.*$|\1='$_VALUE'|" <<< "$CONFIG"`
	else
		# If configuration key is not set, add new key with value
		CONFIG+="
$1='$2'"
	fi
}

storeConfig()
{
	[ -z "$CONFIG" ] &&
		return

	# Check if new the configuration changes from the old configuration by comparing the MD5 sums
	OLDMD5=`md5sum "$CONFIGFILE" | awk '{ print $1 }'`
	NEWMD5=`md5sum <<< "$CONFIG"`
	if [ "$OLDMD5" != "$NEWMD5" ]; then
		if touch "$CONFIGFILE"; then
			# The MD5 sum differences, we're dealing with a new configuration, update the configuration
			# Backup previous configuration
			mv "$CONFIGFILE" "$CONFIGFILE.old`date +%Y%m%d%H%M%S`"
			# Store new configuration
			echo "$CONFIG" > "$CONFIGFILE"
		else
			logError "Can't write to configuration file" #'
		fi
	fi
}

DEFAULTCOOKIEJAR="$CONFIGPATH/WLANderlust.cookiejar"
! $ROOT && DEFAULTCOOKIEJAR=~/'.WLANderlust.cookiejar'

[ -z "$LOGPATH" ] && LOGPATH=`getConfigValue 'LOGPATH'`
DEFAULTLOGFILE="$LOGPATH/WLANderlust.log"
DEFAULTGPSFILE="$LOGPATH/WLANderlust.gps"

[ -z "$LIBPATH" ] && LIBPATH=`getConfigValue 'LIBPATH'`

[ -z "$COOKIEJAR" ] && COOKIEJAR=`getConfigValue 'COOKIEJAR' "$DEFAULTCOOKIEJAR"`
[ -z "$LOGFILE" ] && LOGFILE=`getConfigValue 'LOGFILE' "$DEFAULTLOGFILE"`
[ ! -w "$LOGFILE" ] && [ ! -w `dirname "$LOGFILE"` ] && LOGFILE='/dev/stdout'
[ -z "$GPSFILE" ] && GPSFILE=`getConfigValue 'GPSFILE' "$DEFAULTGPSFILE"`
[ ! -w "$GPSFILE" ] && [ ! -f "$GPSFILE" ] && [ ! -w `dirname "$GPSFILE"` ] && GPSFILE='/dev/null'
[ -z "$DEBUGLOGGING" ] && DEBUGLOGGING=`getConfigValue 'DEBUGLOGGING'`
[ -z "$VERBOSELOGGING" ] && VERBOSELOGGING=`getConfigValue 'VERBOSELOGGING'`
[ -z "$DEBUGLOGGING" ] && DEBUGLOGGING=`getConfigValue 'DEBUGLOGGING'`
[ -z "$SHOWPASSWORDS" ] && SHOWPASSWORDS=`getConfigValue 'SHOWPASSWORDS'`
[ -z "$TIMEOUT" ] && TIMEOUT=`getConfigValue 'TIMEOUT'`
[ -z "$WHATISMYIPURL" ] && WHATISMYIPURL=`getConfigValue 'WHATISMYIPURL'`

[ -z "$AUTOREASSOCIATE" ] && AUTOREASSOCIATE=`getConfigValue 'AUTOREASSOCIATE'`
[ -z "$REASSOCIATEINTERVAL" ] && REASSOCIATEINTERVAL=`getConfigValue 'REASSOCIATEINTERVAL'`

if [ -z "$INTERACTIVE" ]; then
	# Are we in interactive mode?
	[[ -t 1 || -p /dev/stdin ]] &&
		INTERACTIVE='true' ||
		INTERACTIVE='false'
fi

[ -z "$TIMESTAMP" ] && TIMESTAMP=`date +%Y%m%d%H%M%S`

# Get the Host AP interface, SSID and channel
if [ -f '/etc/hostapd/hostapd.conf' ]; then
	_HOSTAPDCONF=`cat '/etc/hostapd/hostapd.conf'`
	HOSTAPINTERFACE=`sed -n 's|^interface=\(.*\)$|\1|p' <<< "$_HOSTAPDCONF"`
	HOSTAPSSID=`sed -n 's|^ssid=\(.*\)$|\1|p' <<< "$_HOSTAPDCONF"`

	_IFCONFIG=`ifconfig "$HOSTAPINTERFACE"`
	grep -q '<UP' <<< "$_IFCONFIG" &&
		HOSTAPSTATE='started' ||
		HOSTAPSTATE='stopped'
	HOSTAPIPADDRESS=`sed -n 's|.*inet \([^ ]*\) .*|\1|p' <<< "$_IFCONFIG"`
	HOSTAPNETMASK=`sed -n 's|.*netmask \([^ ]*\) .*|\1|p' <<< "$_IFCONFIG"`

	_IWDEVINFO=`/sbin/iw dev "$HOSTAPINTERFACE" info`
	HOSTAPCHANNEL=`sed -n 's|^.*channel \([0-9]\+\) .*$|\1|p' <<< "$_IWDEVINFO"`
	HOSTAPBSSID=`sed -n 's|^.*addr \([0-9a-f:]\+\)$|\1|p' <<< "$_IWDEVINFO"`
	# Lowercase Host AP BSSID
	HOSTAPBSSID="${HOSTAPBSSID,,}"
	HOSTAPTXPOWER=`sed -n 's|.*txpower \([0-9.]*\) dBm$|\1|p' <<< "$_IWDEVINFO"`
fi

[ "`uname`" = 'Linux' ] &&
	DEFAULTROUTEINTERFACE=`route -n | sed -n 's|^0\.0\.0\.0 .* \([^ ]*\)$|\1|p' | uniq | sed "/lo/d;/tun[0-9]*/d;/dns[0-9]*/d"`
[ "`uname`" = 'Darwin' ] &&
	DEFAULTROUTEINTERFACE=`netstat -nr | grep '^default' | awk '{ print $6 }'`

# Load the network state
readState()
{
	# Load the state file
	[ -z "$STATE" ] && [ -f "$STATEFILE" ] &&
		STATE=`cat "$STATEFILE"`
}

# $1 key
getState()
{
	readState

	# Lookup key value in the configuration
	sed -n "s|^$1=['\"]\?\([^'\"]*\)['\"]\?$|\1|p" <<< "$STATE" | tail -n 1
}

# $1 key
# $2 value
setState()
{
	readState

	# Check if state key is already set
	if [ -z "$STATE" ]; then
		STATE="$1='${@:2}'"
	elif grep -q "^$1=" <<< "$STATE"; then
		# If configuration key is set, update value
		# Escape for sed special characters
		_KEY=`sed -e 's/[]\/$*.^[]/\\\&/g' <<< "$1"`
		_VALUE=`sed -e 's/[\/&]/\\\&/g' <<< "${@:2}"`
		STATE=`sed "s/^\($_KEY\)=.*$/\1='$_VALUE'/" <<< "$STATE"`
	else
		# If configuration key is not set, add new key with value
		STATE+="
$1='${@:2}'"
	fi
	#ToDo Probably need to do some escaping here too
	eval "$1='${@:2}'"
}

storeState()
{
	#$DEBUGLOGGING && logMessage "$STATE"
	[ -z "$STATE" ] &&
		return

	[ -z "$STATEFILE" ] &&
		logError 'No status file configured' &&
		return 1

	if [ ! -f "$STATEFILE" ]; then
		touch "$STATEFILE" &&
			echo "$STATE" > "$STATEFILE" ||
			logError "Can't write to status file"
	else
		# Check if new the state changes from the old state by comparing the MD5 sums
		OLDMD5=`md5sum "$STATEFILE" | awk '{ print $1 }'`
		NEWMD5=`md5sum <<< "$STATE" | awk '{ print $1 }'`
		if [ "$OLDMD5" != "$NEWMD5" ]; then
			# The MD5 sum differences, we're dealing with a new state, update the state
			# Store new state
			touch "$STATEFILE" &&
				echo "$STATE" > "$STATEFILE" ||
				logError "Can't write to status file"
		fi
	fi
}

# Helper functions
readPassword() {
	unset PASSWORD
	if $SHOWPASSWORDS; then
		read -r -p "$1" -e -i "$2" PASSWORD
	else
		# Code example from https://stackoverflow.com/questions/4316730/linux-scripting-hiding-user-input-on-terminal
		#ToDo Backspace doesn't work yet
		echo -n "$1"
		while IFS= read -r -s -n 1 _C; do
			if [[ -z "$_C" ]]; then
				echo
				break
			else
				echo -n '*'
				PASSWORD+="$_C"
			fi
		done
	fi
}

# HTTP related functions
expandLocation()
{
	# Check if it starts with a protocol
	if grep -iq "^[a-z]*://" <<< "$1"; then
		echo "$1"
	elif grep -q '^/' <<< "$1"; then
		echo -n "$2" | sed 's|\(^[a-zA-Z]*://[^/]*\)/.*|\1|'; echo "$1"
	else
		echo -n "$2" | sed 's|\(^.*/\).*|\1|'; echo "$1"
	fi
}

# Tries to find a location redirect in a given HTML + headers.
# First it tries to find a Location header
# Then a refresh meta tag
# Then a window.location string, this is very crude
getLocationHeader()
{
	LOCATION=''
	if LOCATION=`echo "$1" | tr -d '\r' | sed -n 's|^Location: \(.*\)$|\1|Ip'` && [ ! -z "$LOCATION" ]; then
		# We found a Location header
		$VERBOSELOGGING && logMessage "Location header found: \"$LOCATION\""
	elif LOCATION=`echo "$1" | tr -d '\r\n' | sed -n "s|.*\<meta http-equiv=[\"']refresh[\"'] [^>]*content=[\"'][^;]*; *url=\([^\"']*\)[\"'].*|\1|Ip"` && [ ! -z "$LOCATION" ]; then
		# We found a refresh meta tag
		$VERBOSELOGGING && logMessage "Refresh meta tag found: \"$LOCATION\""
	elif LOCATION=`echo "$1" | sed -n "s|.*window\.location=[\"']\([^\"']*\)[\"'].*|\1|Ip" | head -n 1` && [ ! -z "$LOCATION" ]; then
		# We found a JavaScript redirect
		$VERBOSELOGGING && logMessage "JavaScript redirect found: \"$LOCATION\""
	elif LOCATION=`echo "$1" | sed -n "s|.*location\.href=[\"']\([^\"']*\)[\"'].*|\1|Ip" | head -n 1` && [ ! -z "$LOCATION" ]; then
		# We found a JavaScript redirect
		$VERBOSELOGGING && logMessage "JavaScript redirect found: \"$LOCATION\""
	else
		$VERBOSELOGGING && logMessage 'No location found'
	fi

	if [ ! -z "$LOCATION" ]; then
		LOCATION=`expandLocation "$LOCATION" "$2"`
		$VERBOSELOGGING && logMessage "Location expanded to: \"$LOCATION\""
	fi
}

BODYLOGFILECOUNTER=1
curlGet()
{
	[ -z "$1" ] &&
		logError 'No location given' &&
		return 1
	LOCATION="$1"

	# Create Cookie Jar if not exists
	#[ ! -f "$COOKIEJAR" ] && touch "$COOKIEJAR"

	#CURLARGUMENTS=(--raw -4)
	CURLARGUMENTS=(-4)
	[ ! -z "$INTERFACE" ] && CURLARGUMENTS+=(--interface "$INTERFACE")
	[ ! -z "$TIMEOUT" ] && CURLARGUMENTS+=(-m "$TIMEOUT")
	[ -r "$COOKIEJAR" ] && CURLARGUMENTS+=(--cookie "$COOKIEJAR")
	[ -f "$COOKIEJAR" ] && [ -w "$COOKIEJAR" ] && CURLARGUMENTS+=(--cookie-jar "$COOKIEJAR")
	[ ! -f "$COOKIEJAR" ] && [ -w `dirname "$COOKIEJAR"` ] && CURLARGUMENTS+=(--cookie-jar "$COOKIEJAR")
	[ ! -z "$LASTLOCATION" ] && CURLARGUMENTS+=(--referer "$LASTLOCATION")
	CURLARGUMENTS+=(-s -i "$LOCATION")
	$DEBUGLOGGING && logMessage curl "${CURLARGUMENTS[@]}"

	$VERBOSELOGGING && logMessage "Retrieving \"$LOCATION\""
	if BODY=`curl "${CURLARGUMENTS[@]}"`; then
		if $CAPTIVEPORTALLOGGING; then
			BODYLOGFILE="$CAPTIVEPORTALLOGPATH/CaptivePortal$TIMESTAMP-$BODYLOGFILECOUNTER.log"
			echo "BSSID $BSSID" > "$BODYLOGFILE"
			echo "SSID $SSID" >> "$BODYLOGFILE"
			echo "curl ${CURLARGUMENTS[@]}" >> "$BODYLOGFILE"
			echo "GET $LOCATION" >> "$BODYLOGFILE"
			echo -n "$BODY" >> "$BODYLOGFILE"
			$VERBOSELOGGING && logMessage "Body logged in \"$BODYLOGFILE\""
		fi
		BODYLOGFILECOUNTER=$(($BODYLOGFILECOUNTER + 1))
		return 0;
	fi
	logError "Failed to retrieve '$LOCATION'"
	return 1
}

curlPost()
{
	[ -z "$1" ] &&
		logError 'No location given' &&
		return 1
	[ -z "$2" ] &&
		logError 'No post data given' &&
		return 1
	LOCATION="$1"
	POSTDATA="$2"

	# Create Cookie Jar if not exists
	#[ ! -f "$COOKIEJAR" ] && touch "$COOKIEJAR"

	#CURLARGUMENTS=(--raw -4)
	CURLARGUMENTS=(-4)
	[ ! -z "$INTERFACE" ] && CURLARGUMENTS+=(--interface "$INTERFACE")
	[ ! -z "$TIMEOUT" ] && CURLARGUMENTS+=(-m "$TIMEOUT")
	[ -r "$COOKIEJAR" ] && CURLARGUMENTS+=(--cookie "$COOKIEJAR")
	[ -f "$COOKIEJAR" ] && [ -w "$COOKIEJAR" ] && CURLARGUMENTS+=(--cookie-jar "$COOKIEJAR")
	[ ! -f "$COOKIEJAR" ] && [ -w `dirname "$COOKIEJAR"` ] && CURLARGUMENTS+=(--cookie-jar "$COOKIEJAR")
	[ ! -z "$LASTLOCATION" ] && CURLARGUMENTS+=(-H "Origin: `echo "$LASTLOCATION" | sed 's|^\([a-z]*://[^/]*\)/.*$|\1|'`" --referer "$LASTLOCATION")
	CURLARGUMENTS+=(-s -i -H 'Content-Type: application/x-www-form-urlencoded' --data "$POSTDATA" "$LOCATION")
	$DEBUGLOGGING && logMessage curl "${CURLARGUMENTS[@]}"

	$VERBOSELOGGING && logMessage "Posting \"$LOCATION\""
	if BODY=`curl "${CURLARGUMENTS[@]}"`; then
		if $CAPTIVEPORTALLOGGING; then
			BODYLOGFILE="$CAPTIVEPORTALLOGPATH/CaptivePortal$TIMESTAMP-$BODYLOGFILECOUNTER.log"
			echo "BSSID $BSSID" > "$BODYLOGFILE"
			echo "SSID $SSID" >> "$BODYLOGFILE"
			echo "curl ${CURLARGUMENTS[@]}" >> "$BODYLOGFILE"
			echo "GET $LOCATION" >> "$BODYLOGFILE"
			echo -n "$BODY" >> "$BODYLOGFILE"
			$VERBOSELOGGING && logMessage "Body logged in \"$BODYLOGFILE\""
		fi
		BODYLOGFILECOUNTER=$(($BODYLOGFILECOUNTER + 1))
		return 0;
	fi
	logError "Failed to retrieve '$LOCATION'"
	return 1
}

getBody()
{
	LOCATION="$1"
	if curlGet "$LOCATION"; then
		LASTLOCATION="$LOCATION"
		if [ "$2" = 'true' ]; then
			getLocationHeader "$BODY" "$LOCATION"
			while [ ! -z "$LOCATION" ] && [ $BODYLOGFILECOUNTER -lt 15 ]; do
				if curlGet "$LOCATION"; then
					LASTLOCATION="$LOCATION"
					getLocationHeader "$BODY" "$LOCATION"
				else
					BODY=''
					LOCATION=''
				fi
			done
			LOCATION="$LASTLOCATION"
		fi
	else
		BODY=''
	fi
}

# Checks if we have a working internet connection
isOnline()
{
	getWiFiStatus
	getNetworkStatus

	if ! $INTERFACEISUP; then
		$VERBOSELOGGING && logError 'Interface is not up'
		WAITTIME=1
		return 1
	fi
	$DEBUGLOGGING && logMessage 'Interface is up'

	if $ISWIFIINTERFACE; then
		if [ -z "$BSSID" ]; then
			$VERBOSELOGGING && logError 'Not connected to a WiFi'
			WAITTIME=2
			return 2
		fi
		$DEBUGLOGGING && logMessage 'Connected to a WiFi'
	fi

	if [ -z "$IPADDRESS" ]; then
		$VERBOSELOGGING && logError 'No IP address assigned'
		WAITTIME=2
		return 3
	fi
	$DEBUGLOGGING && logMessage 'IP address assigned'

	# Check if we have a default route
	if ! route -n | grep -q "^0\.0\.0\.0 .* $INTERFACE$"; then
		$VERBOSELOGGING && logError 'No default route'
		WAITTIME=0.5
		return 4
	fi
	$DEBUGLOGGING && logMessage 'Default route exists'

	# Check if we have a working DNS server
	if ! host -t A -W $TIMEOUT "$CAPTIVEPORTALDETECTIONHOSTNAME" > /dev/null; then
		$VERBOSELOGGING && logError 'DNS not working'
		WAITTIME=2
		return 5
	fi
	$DEBUGLOGGING && logMessage 'DNS is working'

	# Check if we have a Captive Portal
	if ! curl -4 --interface "$INTERFACE" -m "$TIMEOUT" -s -i "$CAPTIVEPORTALDETECTIONURL" | grep -q "$CAPTIVEPORTALDETECTIONRESPONSE"; then
		$VERBOSELOGGING && logError 'Captive Portal present'
		WAITTIME=5
		return 6
	fi
	$DEBUGLOGGING && logMessage 'No Captive Portal present'

	# Check if we can ping the Google DNS server
	if ! ping -q -c 2 -W $TIMEOUT 8.8.8.8 > /dev/null 2>&1; then
		$VERBOSELOGGING && logError "Can't ping Google DNS server"
		WAITTIME=2
		return 7
	fi
	$DEBUGLOGGING && logMessage 'Can ping Google DNS server'

	# All the checks are past, we seem to be online
	$VERBOSELOGGING && logMessage "We're online"
	return 0
}

# Captive Portal functions
# https://en.wikipedia.org/wiki/Captive_portal

# Initialise Captive Portal variables
SCRIPTNAME="$LIBPATH/captiveportal"
. "$SCRIPTNAME"
SCRIPTNAME="$0"

# Returns 0 when Captive Portal is present else 1
isCaptivePortalPresent()
{
	(! $INTERFACEISUP || ! $ISWIFIINTERFACE || [ "$WPASTATE" != 'COMPLETED' ]) &&
		return 1

	SCRIPTNAME="$LIBPATH/captiveportal"
	. "$SCRIPTNAME" STATE
	SCRIPTNAME="$0"

	if [ ! -z "$WHATISMYIPURL" ] && ([ "$CAPTIVEPORTALTYPE" = 'none' ] || [ "$CAPTIVEPORTALSTATE" = 'solved' ]); then
		setState 'EXTERNALIPADDRESS' `curl -4 --interface "$INTERFACE" -m "$TIMEOUT" -s "$WHATISMYIPURL" | grep '^[0-9.]*$'`
	fi

	[ "$CAPTIVEPORTALSTATE" = 'present' ] &&
		return 0
	return 1
}

# Returns 0 when Captive Portal is none or solved else 1
solveCaptivePortal()
{
	(! $INTERFACEISUP || ! $ISWIFIINTERFACE || [ "$WPASTATE" != 'COMPLETED' ]) &&
		return 1

	SCRIPTNAME="$LIBPATH/captiveportal"
	. "$SCRIPTNAME" SOLVE
	SCRIPTNAME="$0"

	if [ ! -z "$WHATISMYIPURL" ] && ([ "$CAPTIVEPORTALTYPE" = 'none' ] || [ "$CAPTIVEPORTALSTATE" = 'solved' ]); then
		setState 'EXTERNALIPADDRESS' `curl -4 --interface "$INTERFACE" -m "$TIMEOUT" -s "$WHATISMYIPURL" | grep '^[0-9.]*$'`
	fi

	([ "$CAPTIVEPORTALTYPE" = 'none' ] || [ "$CAPTIVEPORTALSTATE" = 'solved' ]) &&
		return 0
	return 1
}

# WiFi functions
[ -z "$WIGLEAPINAME" ] && WIGLEAPINAME=`getConfigValue 'WIGLEAPINAME'`
[ -z "$WIGLEAPITOKEN" ] && WIGLEAPITOKEN=`getConfigValue 'WIGLEAPITOKEN'`

setInterface() {
	if ! IFCONFIG=`ifconfig "$1" 2> /dev/null`; then
		logError "Interface $1 does not exist"
		exit 1
	fi

	INTERFACE="$1"
	$ROOT &&
		STATEFILE="/var/run/WLANderlust.$INTERFACE.state" ||
		STATEFILE=~/".WLANderlust.$INTERFACE.state"

	grep -q '<UP' <<< "$IFCONFIG" &&
		INTERFACEISUP='true' ||
		INTERFACEISUP='false'
	$DEBUGLOGGING && $INTERFACEISUP && logMessage "Interface $INTERFACE is up"
	$DEBUGLOGGING && ! $INTERFACEISUP && logMessage "Interface $INTERFACE is down"

	ISWIFIINTERFACE='false'
	[ "`uname`" = 'Linux' ] && grep -q '^wlan[0-9]*$' <<< "$INTERFACE" && ISWIFIINTERFACE='true'
	[ "`uname`" = 'Darwin' ]  &&
		networksetup -listallhardwareports | grep -B 1 "^Device: $INTERFACE" | grep -q "Hardware Port: Wi-Fi" &&
		ISWIFIINTERFACE='true'
	$VERBOSELOGGING && $ISWIFIINTERFACE && logMessage "Using WiFi interface $INTERFACE"
	$VERBOSELOGGING && ! $ISWIFIINTERFACE && logMessage "Using non-WiFi interface $INTERFACE"
	IPADDRESS=`ifconfig "$INTERFACE" | sed -n 's|.*inet \([^ ]*\) .*|\1|p'`

	if $ISWIFIINTERFACE && [ "`uname`" = 'Linux' ]; then
		ISROAMING='false'
		if [ -f "/etc/network/interfaces.d/$INTERFACE" ]; then
			WPASUPPLICANTCONF=`sed -n 's/^\swpa-\(conf\|roam\) \(.*\)/\2/p' "/etc/network/interfaces.d/$INTERFACE"`
			# Are we in roaming mode?
			grep -q '^\swpa-roam ' "/etc/network/interfaces.d/$INTERFACE" && ISROAMING='true'
		fi
	fi
}

getWiFiStatus()
{
	PREVIOUSBSSID=`getState 'BSSID'`

	IFCONFIG=`ifconfig "$INTERFACE"`
	grep -q '<UP' <<< "$IFCONFIG" &&
		INTERFACEISUP='true' ||
		INTERFACEISUP='false'

	#ToDo make this portable
	if $INTERFACEISUP && $ISWIFIINTERFACE && [ "`uname`" = 'Linux' ] &&
		[ -x '/sbin/wpa_cli' ] && WPASTATUS=`/sbin/wpa_cli -i "$INTERFACE" status 2> /dev/null`; then
		setState 'BSSID' `sed -n 's|^bssid=\(.*\)$|\1|p' <<< "$WPASTATUS"`
		setState 'SSID' `sed -n 's|^ssid=\(.*\)$|\1|p' <<< "$WPASTATUS"`
		setState 'WPASTATE' `sed -n 's|^wpa_state=\(.*\)$|\1|p' <<< "$WPASTATUS"`
		KEYMGMT=`sed -n 's|^key_mgmt=\(.*\)$|\1|p' <<< "$WPASTATUS"`

		if [ -x '/sbin/iw' ]; then
			CHANNEL=`/sbin/iw dev $INTERFACE info | sed -n 's|^.*channel \([0-9]\+\) .*$|\1|p'`
			# Get the signal strength of the current connection
			SIGNALSTRENGTH=`/sbin/iw dev $INTERFACE link | sed -n 's|^.*signal: \(.*\) dBm|\1|p'`
		fi
	elif $INTERFACEISUP && $ISWIFIINTERFACE && [ "`uname`" = 'Darwin' ]; then
		_AIRPORT=`/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport en0 -I`
		setState 'BSSID' `sed -n 's|^[[:space:]]*BSSID: ||p' <<< "$_AIRPORT"`
		setState 'SSID' `sed -n 's|^[[:space:]]*SSID: ||p' <<< "$_AIRPORT"`
		setState 'WPASTATE' ''
		[ ! -z "$SSID" ] &&
			setState 'WPASTATE' 'COMPLETED'
	else
		setState 'BSSID' ''
		setState 'SSID' ''
		setState 'WPASTATE' ''
	fi

	# Calculate distance to Access Point
	# https://www.linuxjournal.com/magazine/work-shell-calculating-distance-between-two-latitudelongitude-points
	_LOCATION=''
	[ -f "$CONFIGPATH/BSSID.location.cache" ] &&
		_LOCATION=`sed -n "s|^$BSSID;\(.*\)|\1|p" "$CONFIGPATH/BSSID.location.cache"`
	BSSIDDISTANCE=''
	if [ -n "$_LOCATION" ]; then
		_LATITUDE=`sed 's|,.*||' <<< "$_LOCATION"`
		_LONGITUDE=`sed 's|.*,||' <<< "$_LOCATION"`
		#ToDo Calculate distance to Access Point
		# https://www.linuxjournal.com/magazine/work-shell-calculating-distance-between-two-latitudelongitude-points
		BSSIDDISTANCE=''
	fi
}

getNetworkStatus()
{
	[ "`uname`" = 'Linux' ] &&
		setState 'DEFAULTROUTEINTERFACE' `route -n | sed -n 's|^0\.0\.0\.0 .* \([^ ]*\)$|\1|p'`
	[ "`uname`" = 'Darwin' ] &&
		setState 'DEFAULTROUTEINTERFACE' `netstat -nr | grep '^default' | awk '{ print $6 }'`

	IFCONFIG=`ifconfig "$INTERFACE"`
	grep -q '<UP' <<< "$IFCONFIG" &&
		INTERFACEISUP='true' ||
		INTERFACEISUP='false'
	MACADDRESS=`sed -n 's|^[[:space:]]*ether \([a-z0-9:]*\) .*$|\1|p' <<< "$IFCONFIG"`

	if ! $INTERFACEISUP; then
		# Interface is down
		setState 'IPADDRESS' ''
		setState 'NETMASK' ''
		setState 'GATEWAY' ''
		setState 'EXTERNALIPADDRESS' ''
	elif $ISWIFIINTERFACE && [ "$WPASTATE" != 'COMPLETED' ]; then
		# WiFi is not connected
		setState 'IPADDRESS' ''
		setState 'NETMASK' ''
		setState 'GATEWAY' ''
		setState 'EXTERNALIPADDRESS' ''
	elif ! $ISWIFIINTERFACE || [ "$WPASTATE" = 'COMPLETED' ]; then
		setState 'IPADDRESS' `sed -n 's|.*inet \([^ ]*\) .*|\1|p' <<< "$IFCONFIG"`
		setState 'NETMASK' `sed -n 's|.*netmask \([^ ]*\) .*|\1|p' <<< "$IFCONFIG"`
		setState 'GATEWAY' `route -n | sed -n "s|[0-9.]* *\([0-9.]*\) .* $INTERFACE|\1|p" | grep -v "0\.0\.0\.0" | uniq`
	fi
}

scanForNetworks()
{
	! $INTERFACEISUP &&
		return 1

	echo -n 'Scanning'
	if $USEIW; then
		while ! IWSCAN=`iw dev "$INTERFACE" scan 2> /dev/null`; do
			echo -n '.'
			sleep 1
		done
		BSSIDS=`sed -n 's|^BSS \([0-9a-f:]*\).*$|\1|p' <<< "$IWSCAN"`
	else
		while ! IWLISTSCAN=`iwlist "$INTERFACE" scan 2> /dev/null`; do
			echo -n '.'
			sleep 1
		done
		BSSIDS=`sed -n 's|.* - Address: \([0-9A-F:]*\)|\1|p' <<< "$IWLISTSCAN"`
	fi
	# Lowercase BSSIDs
	BSSIDS="${BSSIDS,,}"
	# Remove Host AP BSSID
	BSSIDS=`grep -v "$HOSTAPBSSID" <<< "$BSSIDS"`

	WIFIINFO=`grep -B 5 -A 4 'ESSID:' <<< "$IWLISTSCAN" | sed 's|^  \s*|  |'`
	# Escape for sed special characters
	_HOSTAPSSID=`sed -e 's/[]\/$*.^[]/\\\&/g' <<< "$HOSTAPSSID"`
	WIFIINFO=`tac <<< "$WIFIINFO" | sed -n "/Mode:Master/I,+10 p" | grep -A 5 'ESSID:' | sed "/ESSID:\"$_HOSTAPSSID\"/I,+6 d" | tac`

	[ -z "$WIFIINFO" ] &&
		echo ' - No WiFi networks found' ||
		echo
}

reassociateInterface()
{
	! $ISWIFIINTERFACE &&
		return 1

	logMessage 'Reassociating...'

	_WAITFORCONNECTION=10

	# Sort WiFis by signal strength
	#_WIFIS=`sort --field-separator=';' -k 3nr /var/run/WLANderlust.$INTERFACE.wifis`
	mapfile -t _WIFIS < <(grep -v ';$' /var/run/WLANderlust.$INTERFACE.wifis | sort --field-separator=';' -k 3nr)
	_WPANETWORKS=`wpa_cli -i "$INTERFACE" list_networks`

	# Check if we know any of the WiFis or any of the WiFis is unencrypted and try to connect to them
	_NTRIES=0
	for I in ${!_WIFIS[@]}; do
		_WIFI=${_WIFIS[$I]}
		#BSSID;CHANNEL;SIGNAL;ENCRYPTION;_LOCATION;ESSID
		_BSSID=`sed 's|^\([^;]*\);.*$|\1|' <<< "$_WIFI"`
		#_CHANNEL=`sed 's|^[^;]*;\([^;]*\);.*$|\1|' <<< "$_WIFI"`
		#_SIGNAL=`sed 's|^[^;]*;[^;]*;\([^;]*\);.*$|\1|' <<< "$_WIFI"`
		#_LOCATION=`sed 's|^[^;]*;[^;]*;[^;]*;\([^;]*\);.*$|\1|' <<< "$_WIFI"`
		_ENCRYPTION=`sed 's|^[^;]*;[^;]*;[^;]*;\([^;]*\);.*$|\1|' <<< "$_WIFI"`
		_SSID=`sed 's|^[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;\(.*\)$|\1|' <<< "$_WIFI"`

		if _NETWORKID=`sed -n "s|^\([0-9]*\)\t[^\t]*\t$_BSSID\t.*|\1|p" <<< "$_WPANETWORKS"` && [ -z "$_NETWORKID" ]; then
			if [ -n "$_SSID" ]; then
				_NETWORKID=`sed -n "s|^\([0-9]*\)\t$_SSID\tany\t.*|\1|p" <<< "$_WPANETWORKS"` && [ -n "$_NETWORKID" ]
			fi
		fi

		getWiFiStatus
		if [ "$_BSSID" = "$BSSID" ]; then
			logMessage "Already connected to $_SSID ($_BSSID)"
		elif [ -n "$_NETWORKID" ]; then
			_NTRIES=$(($_NTRIES + 1))
			logMessage "Connecting to $_SSID ($_BSSID)"
			wpa_cli -i "$INTERFACE" disconnect
			wpa_cli -i "$INTERFACE" enable "$_NETWORKID"
			wpa_cli -i "$INTERFACE" select_network "$_NETWORKID"
			wpa_cli -i "$INTERFACE" reconnect
			sleep 1
			getWiFiStatus
			if [ "$_BSSID" = "$BSSID" ]; then
				logMessage "Connected to $SSID ($BSSID)"
			else
				$VERBOSELOGGING && logError "Failed to connect to $_SSID ($_BSSID)"
				continue
			fi
		elif [ "$_ENCRYPTION" = "None" ]; then
			_NTRIES=$(($_NTRIES + 1))
			logMessage "Connecting to $_SSID ($_BSSID)"
			wpa_cli -i "$INTERFACE" enable 0
			iw dev "$INTERFACE" disconnect
			_OUTPUT=`timeout 10 iw dev "$INTERFACE" connect -w "$_SSID" "$_BSSID" 2> /dev/null` ||
				continue
			if ! grep -q ": connected to $_BSSID" <<< "$_OUTPUT"; then
				$VERBOSELOGGING && logError "Failed to connect to $_SSID ($_BSSID)"
				$DEBUGLOGGING && logError "$_OUTPUT"
				continue
			fi
			sleep 1
			getWiFiStatus
			if [ "$_BSSID" = "$BSSID" ]; then
				logMessage "Connected to $SSID ($BSSID)"
			else
				$VERBOSELOGGING && logError "Failed to connect to $_SSID ($_BSSID)"
				continue
			fi
		else
			$DEBUGLOGGING && logError "$_SSID ($_BSSID) does not qualify to reassociate to"
			continue
		fi

		#if timeout $_WAITFORCONNECTION sh -c 'while ! isOnline; do sleep $WAITTIME; done'; then
		sleep $_WAITFORCONNECTION
		isOnline
		case $? in
			0)
				logMessage "Connected to $SSID ($BSSID)"
				logMessage "We're online"

				return 0
				;;
			*)
				$DEBUGLOGGING && logError "Failed to get a working internet connection from $SSID ($BSSID)"
				;;
		esac
	done

	$DEBUGLOGGING && logMessage "NTRIES=$_NTRIES"
	[ $_NTRIES -eq 0 ] &&
		return 2
	return 1
}

append2WPAsupplicant()
{
	if [ ! -f "$WPASUPPLICANTCONF" ]; then
		logError "$WPASUPPLICANTCONF does not exist"
		return 1
	elif [ ! -w "$WPASUPPLICANTCONF" ]; then
		logError "$WPASUPPLICANTCONF is not writable"
		return 1
	elif [ "$WPASTATE" != 'COMPLETED' ]; then
		return 1
	elif [ "$KEYMGMT" != 'NONE' ]; then
		return 1
	elif /bin/grep -q "$BSSID" "$WPASUPPLICANTCONF"; then
		# BSSID is already mentioned in wpa_supplicant configuration
		return 0
	elif /bin/grep -q "^[^#]\s*\bssid=\"$SSID\"" "$WPASUPPLICANTCONF"; then
		# SSID is already configured in wpa_supplicant configuration
		return 0
	elif [ -z "$EXTERNALIPADDRESS" ] && [ "$SIGNALSTRENGTH" -lt 60 ]; then
		# Connection is to poor to say anything about the workings of the connection
		return 1
	fi

	if ([ "$CAPTIVEPORTALTYPE" = 'none' ] || [ "$CAPTIVEPORTALSTATE" = 'solved' ]) && [ ! -z "$EXTERNALIPADDRESS" ]; then
		_PRIORITY='50'
	elif [ "$CAPTIVEPORTALSTATE" = 'present' ]; then
		_PRIORITY='-50'
	else
		_PRIORITY='-200'
	fi

	logMessage "Appending configuration for SSID \"$SSID\" to $WPASUPPLICANTCONF"
	cat << EOF >> "$WPASUPPLICANTCONF"

# Added on `date` by WLANderlust
network={
	bssid=$BSSID
	ssid="$SSID"
	key_mgmt=NONE
	priority=$_PRIORITY
}
EOF

	# Reload the wpa_supplicant configuration
	$VERBOSELOGGING && logMessage 'Reload the wpa_supplicant configuration'
	/sbin/wpa_cli -i "$INTERFACE" reconfigure
	$VERBOSELOGGING && logMessage 'Wpa_supplicant configuration reloaded'
}

editwpa_supplicant()
{
	if [ ! -f "$WPASUPPLICANTCONF" ]; then
		logError "$WPASUPPLICANTCONF does not exist"
		return 1
	elif [ ! -w "$WPASUPPLICANTCONF" ]; then
		logError "$WPASUPPLICANTCONF is not writable"
		return 1
	fi

	if [ ! -f ~/.selected_editor ]; then
		/usr/bin/select-editor
	fi
	. ~/.selected_editor

	OLDMD5=`md5sum "$WPASUPPLICANTCONF" | awk '{ print $1 }'`
	"$SELECTED_EDITOR" "$WPASUPPLICANTCONF"
	NEWMD5=`md5sum "$WPASUPPLICANTCONF" | awk '{ print $1 }'`

	[ "$OLDMD5" = "$NEWMD5" ] &&
		return 0

	# Reload the wpa_supplicant configuration if the file has changed
	$VERBOSELOGGING && logMessage 'Reload the wpa_supplicant configuration'
	/sbin/wpa_cli -i "$INTERFACE" reconfigure
	$VERBOSELOGGING && logMessage 'Wpa_supplicant configuration reloaded'
}

configureWiFi()
{
	_SSID="$1"
	_BSSID="$2"
	_ENCRYPTION="$3"

	# Check if this network is already in wpa_supplicant
	#ISINWPASUPPLICANT=`/bin/grep -q "^[^#]\s*\bssid=\"$SSID\"" "$WPASUPPLICANTCONF" && echo 'true' || echo 'false'`
	#if $ISINWPASUPPLICANT; then
	#	OLDWIFICONFIG=`sudo fgrep -B 2 -A 3 -x "^[^#]\s*\bssid=\"$SSID\"" "$WPASUPPLICANTCONF"`

	#	echo 'SSID already configured:'
	#	echo "$OLDWIFICONFIG"
	#	echo
	#	echo 'Connect/Replace/Delete/Quit? (C/R/D/Q)'
	#else
	#	echo 'Connect/Add/Quit? (C/Q)'
	#fi

	#read -r -n 1 CHOICE
	#case "$CHOICE" in
	#	C|c)
	#		iw dev "$INTERFACE" disconnect
	#		iw dev "$INTERFACE" connect -w "$SSID" "$_BSSID"
	#	;;
	#	D|d)
	#		logError 'Delete configuration not yet implemented'
	#		return 1
	#	;;
	#	Q|q) return 1 ;;
	#esac

	if [ ! -z "$_SSID" ]; then
		if [ -z "$SSIDINFO" ]; then
			readPassword 'Password: '
			echo
		elif echo -n "$SSIDINFO" | grep -q "^  Encryption key:on$"; then
			unset PASSWORD
			# Check password length, 8 to 63 charactrs
			while ! echo -n "$PASSWORD"| egrep -q "^.{8,63}$"; do
				readPassword 'Password: ' "$PASSWORD"
			done
			echo
		fi

		if [ ! -z "$PASSWORD" ]; then
			WIFICONFIG="network={
	#bssid=$_BSSID
	ssid=\"$_SSID\"
	psk=\"$PASSWORD\"
	priority=50
}"
		else
			WIFICONFIG="network={
	#bssid=$_BSSID
	ssid=\"$_SSID\"
	key_mgmt=NONE
	priority=50
}"
		fi

		# Check if this network is already in wpa_supplicant
		#if ! /bin/fgrep -q -x "	ssid=\"$_SSID\"" "$WPASUPPLICANTCONF"; then
		#if ! /bin/grep -q "^\s*ssid=\"$_SSID\"" "$WPASUPPLICANTCONF"; then
			while true; do
				echo 'Configuration:'
				echo "$WIFICONFIG"
				echo
				read -r -n 1 -p 'Save? (Y/n/e) ' CHOICE
				echo
				case "$CHOICE" in
					''|Y|y)
						echo -e "\n# Added on `date` by WLANderlust" >> "$WPASUPPLICANTCONF"
						echo "$WIFICONFIG" >> "$WPASUPPLICANTCONF"
						logMessage 'Configuration stored'

						# Reload the wpa_supplicant configuration
						wpa_cli -i $INTERFACE reconfigure > /dev/null
						return 0
						;;
					E|e)
						TEMPFILE=`tempfile`
						echo "$WIFICONFIG" > "$TEMPFILE"
						if [ ! -f ~/.selected_editor ]; then
							/usr/bin/select-editor
						fi
						. ~/.selected_editor
						"$SELECTED_EDITOR" "$TEMPFILE"
						WIFICONFIG=`cat "$TEMPFILE"`
						rm "$TEMPFILE"
						;;
					N|n)
						logError 'Configuration not stored'
						return 1
						;;
				esac
			done
		#else
		#	echo 'New configuration:'
		#	echo "$WIFICONFIG"
		#	echo
		#	echo 'Save? (y/N)'
		#	read -n 1 CHOICE
		#	case "$CHOICE" in
		#		Y|y)
		#			logError 'Replace configuration not yet implemented'
		#			return 1
		#			;;
		#		*)
		#			logError 'New configuration not stored'
		#			return 1
		#			;;
		#	esac
		#fi
	fi

	return 1
}

configureWiFiManual()
{
	read -r -p 'SSID: ' _SSID
	configureWiFi "$_SSID" ''
}

toggleRoaming()
{
	! $ISWIFIINTERFACE &&
		return 1
	[ ! -f "/etc/network/interfaces.d/$INTERFACE" ] &&
		return 1

	if $ISROAMING; then
		# Disable roaming
		wpa_action "$INTERFACE" stop > /dev/null 2>&1
		ifdown "$INTERFACE" > /dev/null 2>&1
		INTERFACECONFIG=`sed 's| inet manual| inet dhcp|;s|wpa-roam |wpa-conf |' "/etc/network/interfaces.d/$INTERFACE"`
		echo "$INTERFACECONFIG" > "/etc/network/interfaces.d/$INTERFACE"
		ifup "$INTERFACE" > /dev/null 2>&1 &
		ISROAMING='false'
	else
		# Enable roaming
		ifdown "$INTERFACE" > /dev/null 2>&1
		INTERFACECONFIG=`sed 's| inet dhcp| inet manual|;s|wpa-conf |wpa-roam |' "/etc/network/interfaces.d/$INTERFACE"`
		echo "$INTERFACECONFIG" > "/etc/network/interfaces.d/$INTERFACE"
		ifup "$INTERFACE" > /dev/null 2>&1 &
		ISROAMING='true'
	fi
}

# IP over DNS tunneling functions
isIPoverDNSactive()
{
	[ "`uname`" != 'Linux' ] &&
		return

	SCRIPTNAME="$LIBPATH/ipoverdns"
	. "$SCRIPTNAME" STATE
	SCRIPTNAME="$0"

	if [ ! -z "$WHATISMYIPURL" ] && [ "$IPOVERDNSSTATE" = 'started' ]; then
		setState 'EXTERNALIPADDRESS' `curl -4 --interface "$IPOVERDNSINTERFACE" -m "$TIMEOUT" -s "$WHATISMYIPURL" | grep '^[0-9.]*$'`
	fi
}

startIPoverDNStunneling()
{
	[ "`uname`" != 'Linux' ] &&
		return

	SCRIPTNAME="$LIBPATH/ipoverdns"
	. "$SCRIPTNAME" START
	SCRIPTNAME="$0"

	if [ ! -z "$WHATISMYIPURL" ] && [ "$IPOVERDNSSTATE" = 'started' ]; then
		setState 'EXTERNALIPADDRESS' `curl -4 --interface "$IPOVERDNSINTERFACE" -m "$TIMEOUT" -s "$WHATISMYIPURL" | grep '^[0-9.]*$'`
	fi
}

stopIPoverDNStunneling()
{
	[ "`uname`" != 'Linux' ] &&
		return

	SCRIPTNAME="$LIBPATH/ipoverdns"
	. "$SCRIPTNAME" STOP
	SCRIPTNAME="$0"
}

# VPN functions
isVPNactive()
{
	[ "`uname`" != 'Linux' ] &&
		return

	SCRIPTNAME="$LIBPATH/vpn"
	. "$SCRIPTNAME" STATE
	SCRIPTNAME="$0"

	if [ ! -z "$WHATISMYIPURL" ] && [ "$VPNSTATE" = 'started' ]; then
		setState 'EXTERNALIPADDRESS' `curl -4 --interface "$VPNINTERFACE" -m "$TIMEOUT" -s "$WHATISMYIPURL" | grep '^[0-9.]*$'`
	fi
}

startVPN()
{
	[ "`uname`" != 'Linux' ] &&
		return

	SCRIPTNAME="$LIBPATH/vpn"
	. "$SCRIPTNAME" START
	SCRIPTNAME="$0"

	if [ ! -z "$WHATISMYIPURL" ] && [ "$VPNSTATE" = 'started' ]; then
		setState 'EXTERNALIPADDRESS' `curl -4 --interface "$VPNINTERFACE" -m "$TIMEOUT" -s "$WHATISMYIPURL" | grep '^[0-9.]*$'`
	fi
}

stopVPN()
{
	[ "`uname`" != 'Linux' ] &&
		return

	SCRIPTNAME="$LIBPATH/vpn"
	. "$SCRIPTNAME" STOP
	SCRIPTNAME="$0"
}

# Firewall functions
startFirewall()
{
	FWINTERFACE="$INTERFACE"
	if [ "$IPOVERDNSSTATE" = 'started' ]; then
		FWINTERFACE="$IPOVERDNSINTERFACE"
	elif [ "$VPNSTATE" = 'started' ]; then
		FWINTERFACE="$VPNINTERFACE"
	else
		FWINTERFACE="$INTERFACE"
	fi

	for FILE in $(run-parts --list "$LIBPATH/firewall.d"); do
		SCRIPTNAME="$FILE"
		. "$FILE" START
	done
	SCRIPTNAME="$0"
}

stopFirewall()
{
	$VERBOSELOGGING && logMessage 'Stopping Firewall'

	for FILE in $(run-parts --list --reverse "$LIBPATH/firewall.d"); do
		SCRIPTNAME="$FILE"
		. "$FILE" STOP
	done
	SCRIPTNAME="$0"

	FWINTERFACE="$INTERFACE"
	logMessage 'Firewall stopped'
}

# Changes the channel of the Host Access Point
switchHostAPchannel()
{
	[ ! -f '/etc/hostapd/hostapd.conf' ] &&
		return 1
	[ -z "$CHANNEL" ] &&
		return 0

	NEWHOSTAPCHANNEL=1
	[ "$CHANNEL" -lt 6 ] && NEWHOSTAPCHANNEL=11

	if [ "$NEWHOSTAPCHANNEL" -ne "$HOSTAPCHANNEL" ]; then
		logMessage "Changing channel of the Host Access Point to $NEWHOSTAPCHANNEL"
		# Change channel in hostapd.conf
		sed "s|^channel=.*$|channel=$NEWHOSTAPCHANNEL|" -i /etc/hostapd/hostapd.conf
		# restart hostapd
		# Somehow `service hostapd restart` does not start the service
		service hostapd stop
		service hostapd start
		return 0
	fi

	return 1
}

HASGPS='false'
ISMOVING='false'
getGPSStatus()
{
	HASGPS='false'
	LATITUDE=''
	LONGITUDE=''
	ALTITUDE=''
	SPEED='0'
	ISMOVING='false'

	! _GPSSENTENCE=`gpspipe -n 2 -w 2> /dev/null | grep -m 1 '"class":"DEVICES"'` &&
		return 1

	_GPSDEVICES=`sed -n 's/.*"devices":\[\([^]]*\)].*/\1/p' <<< "$_GPSSENTENCE"`
	[ -z "$_GPSDEVICES" ] &&
		return 1

	HASGPS='true'
	#logMessage 'GPS active'

	if _GPSSENTENCE=`timeout $TIMEOUT gpspipe -w | grep -m 1 '"class":"TPV"'`; then
		LATITUDE=`sed -n 's/.*"lat":\([0-9.]*\).*/\1/p' <<< "$_GPSSENTENCE"`
		LONGITUDE=`sed -n 's/.*"lon":\([0-9.]*\).*/\1/p' <<< "$_GPSSENTENCE"`
		ALTITUDE=`sed -n 's/.*"alt":\([0-9.]*\).*/\1/p' <<< "$_GPSSENTENCE"`
		SPEED=`sed -n 's/.*"speed":\([0-9.]*\).*/\1/p' <<< "$_GPSSENTENCE"`
		[ -n "$SPEED" ] && awk "BEGIN { exit ($SPEED > 0.25) ? 0 : 1 }" &&
			ISMOVING='true' ||
			ISMOVING='false'
	fi
}
