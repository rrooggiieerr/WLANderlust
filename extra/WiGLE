#!/bin/bash
#
# Scan for WiFi networks and log the for upload to WiGLE.net
# Logging happens in the Kismet CSV format
# ToDo:
# * Automaticly upload to WiGLE.net if we have a working network connection
#
# Rogier van Staveren, January 2019, initial release
#
# A handy oneliner if you like to show the WiFi networks in last logfile sorted
# on best signal:
# tail -n +2 `ls WiGLE-*.log | tail -n 1` | sort -n -r --field-separator=';' -k 23 | awk -F\; '{print $23" "$4" \""$3"\""}'

INTERFACE='wlan1'

VERBOSELOGGING='true'
AUTOUPLOAD='true'
DELETEAFTERUPLOAD='false'

WIGLEAPINAME=''
WIGLEAPITOKEN=''

# Write the log every 5 minutes
LOGINTERVAL=300
LOGDIR=~/.WiGLE

# Apparently the iw command is more future and feature proof, however this
# script currently uses the iwlist command to retrieve the WiFi details
USEIW='false'

# Get the Host AP SSID
if [ -f '/etc/hostapd/hostapd.conf' ]; then
	HOSTAPINTERFACE=`sed -n 's|^interface=\(.*\)$|\1|p' /etc/hostapd/hostapd.conf`
	HOSTAPBSSID=`/sbin/iw dev "$HOSTAPINTERFACE" info | sed -n 's|^.*addr \([0-9a-f:]\+\)$|\1|p'`
	# Uppercase Host AP BSSID
	HOSTAPBSSID="${HOSTAPBSSID^^}"
	$VERBOSELOGGING && echo "Your Host AP BSSID: $HOSTAPBSSID"
fi

[ ! -d "$LOGDIR" ] &&
	mkdir -p "$LOGDIR"
rm -f "$LOGDIR"/alluploaded

LOGFILE=`date +%Y%m%d%H`.log
# If there already is a logfile with the same name load it
[ -f "$LOGDIR/$LOGFILE" ] &&
	LOG=`tail -n +2 "$LOGDIR/$LOGFILE"`
LASTLOG=`date +%s`

NETWORKCOUNTER=1
[ -n "$LOG" ] &&
	NETWORKCOUNTER=$((`wc -l <<< "$LOG"` + 1))

while true; do
	$AUTOUPLOAD && (
		[ -f "$LOGDIR"/alluploaded ] &&
			sleep 10 &&
			exit

		# Check if we have an internet connection
		if ! route -n | grep -q '^0\.0\.0\.0' ||
			! ping -q -c 1 -W 1 8.8.8.8 > /dev/null 2>&1 ||
			! host -t A api.wigle.net > /dev/null; then
			$VERBOSELOGGING && echo 'No internet connection'
			# Wait a bit before giving uploading a new try
			sleep 10
			exit
		fi

		[ -f "$LOGDIR"/isuploading ] &&
			exit
		touch "$LOGDIR"/isuploading

		# We have an internet connection, let's upload the latest logfiles

		_FILES=`cd "$LOGDIR"; ls [0-9]*.log`
		# Remove the logfile we're currently logging to from the list
		echo "Removing $LOGFILE from upload queue"
		_FILES=`grep -v "$LOGFILE" <<< "$_FILES"`
		if [ -f "$LOGDIR"/lastuploaded ] &&
			_LASTUPLOADED=`cat "$LOGDIR"/lastuploaded` &&
			[ -n "$_LASTUPLOADED" ] &&
			grep -q "$_LASTUPLOADED" <<< "$_FILES"; then
			_FILE=`grep -A 1 "$_LASTUPLOADED" <<< "$_FILES" | tail -n +2`
		else
			_FILE=`head -n 1 <<< "$_FILES"`
			echo "_FILE=$_FILE"
		fi

		if [ -n "$_FILE" ]; then
			$VERBOSELOGGING && echo "Uploading $_FILE to WiGLE.net"
			if [ -z "$WIGLEAPINAME" ] || [ -z "$WIGLEAPITOKEN" ]; then
				# Anonymous upload
				_RESULT=`curl -4 -m 5 -s -i -F "file=@$LOGDIR/$_FILE" 'https://api.wigle.net/api/v2/file/upload'`
			else
				_RESULT=`curl -4 -m 5 -s -i -u "$WIGLEAPINAME:$WIGLEAPITOKEN" -F "file=@$LOGDIR/$_FILE" 'https://api.wigle.net/api/v2/file/upload'`
			fi
			if grep -q '"success":true' <<< "$_RESULT"; then
				$VERBOSELOGGING &&  echo "Uploaded $_FILE to WiGLE.net"
				#$DELETEAFTERUPLOAD &&
				#	rm "$LOGDIR/$_FILE"
			else
				echo "Failed to upload $_FILE to WiGLE.net"
				echo "$_FILE" >> "$LOGDIR"/uploadfailed
			fi
			echo "$_FILE" > "$LOGDIR"/lastuploaded
		else
			$VERBOSELOGGING && echo "No more logfiles to upload"
			touch "$LOGDIR"/alluploaded
		fi

		rm "$LOGDIR"/isuploading
	) &

	# Check if a GPS device is connected
	_GPSSENTENCE=`gpspipe -n 2 -w | grep -m 1 '"class":"DEVICES"'`
	_GPSDEVICES=`sed -n 's/.*"devices":\[\([^]]*\)].*/\1/p' <<< "$_GPSSENTENCE"`
	if [ -z "$_GPSDEVICES" ]; then
		echo 'No GPS connected!'
		sleep 5
		continue
	fi
	# Only continue if we have a GPS device
	
	if $USEIW; then
		if ! IWSCAN=`sudo iw dev "$INTERFACE" scan 2> /dev/null`; then
			echo -n '.'
			sleep 1
			continue
		fi
		BSSIDS=`sed -n 's|^BSS \([0-9a-f:]*\).*$|\1|p' <<< "$IWSCAN"`
	else
		if ! IWLISTSCAN=`sudo iwlist "$INTERFACE" scan 2> /dev/null`; then
			echo -n '.'
			sleep 1
			continue
		fi
		BSSIDS=`sed -n 's|.* - Address: \([0-9A-F:]*\)|\1|p' <<< "$IWLISTSCAN"`
	fi
	# Uppercase BSSIDs
	BSSIDS="${BSSIDS^^}"

	if _GPSSENTENCE=`timeout 2 gpspipe -w | grep -m 1 '"class":"TPV"'`; then
		LATITUDE=`sed -n 's/.*"lat":\(-\?[0-9.]*\).*/\1/p' <<< "$_GPSSENTENCE"`
		LONGITUDE=`sed -n 's/.*"lon":\(-\?[0-9.]*\).*/\1/p' <<< "$_GPSSENTENCE"`
		ALTITUDE=`sed -n 's/.*"alt":\(-\?[0-9.]*\).*/\1/p' <<< "$_GPSSENTENCE"`
		SPEED=`sed -n 's/.*"speed":\([0-9.]*\).*/\1/p' <<< "$_GPSSENTENCE"`
	fi
	# Is this the right date format to use?
	LASTSEEN=`date -u`

	for BSSID in $BSSIDS; do
		if [ "$BSSID" != "$HOSTAPBSSID" ]; then
			if $USEIW; then
				BSSIDINFO=`grep -A 100 -i "^BSS $BSSID" <<< "$IWSCAN"`
				tail -n +2 <<< "$BSSIDINFO" | grep -q '^BSS ' &&
					BSSIDINFO=`grep -m 2 -B 100 '^BSS ' <<< "$BSSIDINFO" | head -n -1`
				echo "$BSSIDINFO"
				CHANNEL=`sed -n 's|.*DS Parameter set: channel \([0-9]*\).*|\1|p' <<< "$BSSIDINFO"`
				echo "CHANNEL=$CHANNEL"
				ESSID=`sed -n 's|.*SSID: \(.*\)|\1|p' <<< "$BSSIDINFO"`
				echo "ESSID=$ESSID"
				SIGNAL=`sed -n 's|.*signal: \(-[0-9.]*\) .*|\1|p' <<< "$BSSIDINFO"`
				echo "SIGNAL=$SIGNAL"
			else
				BSSIDINFO=`grep -A 50 " - Address: $BSSID" <<< "$IWLISTSCAN"`
				tail -n +2 <<< "$BSSIDINFO" | grep -q ' - Address: ' &&
					BSSIDINFO=`grep -m 2 -B 50 ' - Address: ' <<< "$BSSIDINFO" | head -n -1`
				BSSIDINFO=`grep -v " IE: Unknown: " <<< "$BSSIDINFO"`
				CHANNEL=`sed -n 's|.*Channel:\([0-9]*\)|\1|p' <<< "$BSSIDINFO"`
				ESSID=`sed -n 's|.*ESSID:"\(.*\)"|\1|p' <<< "$BSSIDINFO"`
				SIGNAL=`sed -n 's|.*Signal level=\(-[0-9]*\).*|\1|p' <<< "$BSSIDINFO"`

				MODE=`sed -n 's|.*Mode:\(.*\)|\1|p' <<< "$BSSIDINFO"`
				if [ "$MODE" = 'Master' ]; then
					MODE='infrastructure'
				elif [ "$MODE" = 'Ad-Hoc' ]; then
					MODE='ad-hoc'
				elif [ "$MODE" = 'Unknown/bug' ]; then
					# Ignore this BSSID
					$VERBOSELOGGING && echo "MODE='$MODE' for BSSID $BSSID"
					continue
				else
					echo "MODE='$MODE'"
					echo "$BSSIDINFO"
				fi

				ENCRYPTION=`sed -n 's|.*Encryption key:\(.*\)|\1|p' <<< "$BSSIDINFO"`
				if [ "$ENCRYPTION" = 'off' ]; then
					ENCRYPTION='None'
				else
				_IE=`grep -A 50 ' IE: ' <<< "$BSSIDINFO"`
				_GROUPCIPHER=`sed -n 's|.*Group Cipher : \(.*\)|\1|p' <<< "$_IE" | uniq`
				ENCRYPTION="$_GROUPCIPHER"
				grep -q 'WPA Version 1' <<< "$_IE" &&
						ENCRYPTION+=',WPA'
					grep -q 'WPA2 Version 1' <<< "$_IE" &&
						ENCRYPTION+=',WPA2'
				fi
				RATES=`grep -o '[0-9]* Mb/s' <<< "$BSSIDINFO" | sed 's| Mb/s||'`
				RATES=`sort -n <<< "$RATES"`
				MAXRATE=`tail -n 1 <<< "$RATES"`
				if [ "$MAXRATE" -le 11 ]; then
					CARRIER='IEEE 802.11b'
				elif [ "$MAXRATE" -gt 54 ]; then
					CARRIER='IEEE 802.11b,IEEE 802.11g,IEEE 802.11n'
				else
					CARRIER='IEEE 802.11b,IEEE 802.11g'
				fi
			fi

			LOGENTRY=`grep "^.*;$BSSID;.*$" <<< "$LOG"`
			if [ -n "$LOGENTRY" ]; then
				$VERBOSELOGGING && echo "Updating BSSID $BSSID"
				LOG=`grep -v ".*;$BSSID;.*" <<< "$LOG"`
				_NETWORK=`sed 's|^\([0-9]*\);.*|\1|' <<< "$LOGENTRY"`
				LOGENTRY=`sed "s/[^;]*/$LASTSEEN/"21 <<< "$LOGENTRY"`

				BESTSIGNAL=`awk -F\; '{print $23}' <<< "$LOGENTRY"`
				if [ $BESTSIGNAL -lt $SIGNAL ]; then
					LOGENTRY=`sed "s/[^;]*/$SIGNAL/"23 <<< "$LOGENTRY"`
					LOGENTRY=`sed "s/[^;]*/$LATITUDE/"33 <<< "$LOGENTRY"`
					LOGENTRY=`sed "s/[^;]*/$LONGITUDE/"34 <<< "$LOGENTRY"`
					LOGENTRY=`sed "s/[^;]*/$ALTITUDE/"35 <<< "$LOGENTRY"`
				fi

				MINLATITUDE=`awk -F\; '{print $25}' <<< "$LOGENTRY"`
				awk "BEGIN { exit ($LATITUDE < $MINLATITUDE) ? 0 : 1 }" &&
					LOGENTRY=`sed "s/[^;]*/$LATITUDE/"25 <<< "$LOGENTRY"`

				MINLONGITUDE=`awk -F\; '{print $26}' <<< "$LOGENTRY"`
				awk "BEGIN { exit ($LONGITUDE < $MINLONGITUDE) ? 0 : 1 }" &&
					LOGENTRY=`sed "s/[^;]*/$LONGITUDE/"26 <<< "$LOGENTRY"`

				MINALTITUDE=`awk -F\; '{print $27}' <<< "$LOGENTRY"`
				awk "BEGIN { exit ($ALTITUDE < $ALTITUDE) ? 0 : 1 }" &&
					LOGENTRY=`sed "s/[^;]*/$ALTITUDE/"27 <<< "$LOGENTRY"`

				MINSPEED=`awk -F\; '{print $28}' <<< "$LOGENTRY"`
				awk "BEGIN { exit ($SPEED < $MINSPEED) ? 0 : 1 }" &&
					LOGENTRY=`sed "s/[^;]*/$SPEED/"28 <<< "$LOGENTRY"`

				MAXLATITUDE=`awk -F\; '{print $29}' <<< "$LOGENTRY"`
				awk "BEGIN { exit ($LATITUDE > $MAXLATITUDE) ? 0 : 1 }" &&
					LOGENTRY=`sed "s/[^;]*/$LATITUDE/"29 <<< "$LOGENTRY"`

				MAXLONGITUDE=`awk -F\; '{print $30}' <<< "$LOGENTRY"`
				awk "BEGIN { exit ($LONGITUDE > $MAXLONGITUDE) ? 0 : 1 }" &&
					LOGENTRY=`sed "s/[^;]*/$LONGITUDE/"30 <<< "$LOGENTRY"`

				MAXALTITUDE=`awk -F\; '{print $31}' <<< "$LOGENTRY"`
				awk "BEGIN { exit ($ALTITUDE > $MAXALTITUDE) ? 0 : 1 }" &&
					LOGENTRY=`sed "s/[^;]*/$ALTITUDE/"31 <<< "$LOGENTRY"`

				MAXSPEED=`awk -F\; '{print $32}' <<< "$LOGENTRY"`
				awk "BEGIN { exit ($SPEED > $MAXSPEED) ? 0 : 1 }" &&
					LOGENTRY=`sed "s/[^;]*/$SPEED/"32 <<< "$LOGENTRY"`

				# Replace entry
				#LOG=`sed "/^$_NETWORK;/c\\\\$LOGENTRY" <<< "$LOG"`
			else
				$VERBOSELOGGING && echo "New BSSID $BSSID"
				# Network;NetType;ESSID;BSSID;Info;Channel;Cloaked;Encryption;Decrypted;MaxRate;MaxSeenRate;Beacon;LLC;Data;Crypt;Weak;Total;Carrier;Encoding;FirstTime;LastTime;BestQuality;BestSignal;BestNoise;GPSMinLat;GPSMinLon;GPSMinAlt;GPSMinSpd;GPSMaxLat;GPSMaxLon;GPSMaxAlt;GPSMaxSpd;GPSBestLat;GPSBestLon;GPSBestAlt;DataSize;IPType;IP;
				LOGENTRY="$NETWORKCOUNTER;$MODE;$ESSID;$BSSID;;$CHANNEL;No;$ENCRYPTION;No;$MAXRATE;;;;;;;;$CARRIER;;$LASTSEEN;$LASTSEEN;;$SIGNAL;;$LATITUDE;$LONGITUDE;$ALTITUDE;$SPEED;$LATITUDE;$LONGITUDE;$ALTITUDE;$SPEED;$LATITUDE;$LONGITUDE;$ALTITUDE;;;;"
				NETWORKCOUNTER=$((NETWORKCOUNTER + 1))
			fi

			# Add entry
			[ -n "$LOG" ] &&
				LOG+=$'\n'
			LOG+="$LOGENTRY"
		fi
	done

	# Create a new logfile on the hour
	NEWLOGFILE=`date +%Y%m%d%H`.log
	if [ `date +%s` -ge $(($LASTLOG + $LOGINTERVAL)) ] || [ "$NEWLOGFILE" != "$LOGFILE" ]; then
		if [ -n "$LOG" ]; then
			$VERBOSELOGGING && echo "Writing logfile $LOGFILE"
			# Write the header
			echo 'Network;NetType;ESSID;BSSID;Info;Channel;Cloaked;Encryption;Decrypted;MaxRate;MaxSeenRate;Beacon;LLC;Data;Crypt;Weak;Total;Carrier;Encoding;FirstTime;LastTime;BestQuality;BestSignal;BestNoise;GPSMinLat;GPSMinLon;GPSMinAlt;GPSMinSpd;GPSMaxLat;GPSMaxLon;GPSMaxAlt;GPSMaxSpd;GPSBestLat;GPSBestLon;GPSBestAlt;DataSize;IPType;IP;' > "$LOGDIR/$LOGFILE"
			# Sort the log entries on the network counter field
			sort -n --field-separator=';' -k 1 <<< "$LOG" >> "$LOGDIR/$LOGFILE"
		fi

		if [ "$NEWLOGFILE" != "$LOGFILE" ]; then
			LOGFILE="$NEWLOGFILE"
			# Reset the log and network counter
			LOG=''
			NETWORKCOUNTER=1
			rm -f "$LOGDIR"/alluploaded
		fi

		LASTLOG=`date +%s`
	fi

	# Maybe wait a bit before we scan again?
	# 1 second is about 27.8 meters when driving at 100 KM/H
	#sleep 1
done
