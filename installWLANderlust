#!/bin/bash
#
if [ "$(id -u)" -ne 0 ]; then
	echo 'You should run this installation script as root!'
	exit 1
fi

while [ ! -z "$1" ]; do
	PARAM="$1"
	case $PARAM in
		--restart)
			rm '.installWLANderlust.state'
			;;
		--update)
			INSTALLATIONSTATE='update'
			;;
	esac
	shift
done

# Check if we can write in the current directory to store the installation state
if ! `touch '.installWLANderlust.state'`; then
	echo 'Unable to write installation state file in current directory'
	exit 1
fi

if [ -z "$INSTALLATIONSTATE" ]; then
	INSTALLATIONSTATE=`cat '.installWLANderlust.state'`
fi
if [ -z "$INSTALLATIONSTATE" ]; then
	INSTALLATIONSTATE='introduction'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

ISREMOTELOGIN=`pstree -ps $$ | grep -q ssh && echo true || echo false`

# Introduction
if [ "$INSTALLATIONSTATE" = 'introduction' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Welcome to the installation script of WLANderlust!

This script will configure your freshly installed Raspbian to be a roaming
Access Point with advanced features. Please read the README.md file for more
details.

\e[1mPress Q to quit or any other key to proceed\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit

	INSTALLATIONSTATE='security'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Security settings
if [ "$INSTALLATIONSTATE" = 'security' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Security

ToDo

\e[1mPress Q to quit, S to skip or any other key to ToDo\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo

		# https://www.raspberrypi.org/documentation/configuration/security.md
		#ToDo Ask for SSH public key
		#ToDo Validate SSH public key

		if [ ! -z "$SSHPUBLICKEY" ]; then
			echo
			mkdir -p ~pi/.ssh
			echo "$SSHPUBLICKEY" >> ~pi/.ssh/authorized_keys
			chown -R pi:pi ~pi/.ssh
		elif [ -e /run/sshwarn ]; then
			# Change user pi password
			echo
			echo 'You need to change the default password for user pi'
			passwd pi
		fi

		# Disable password authentication in SSH daemon if authorized_keys are configured
		if [ -s ~pi/.ssh/authorized_keys ]; then
			echo
			echo 'You are using key based authentication for SSH, disabling password based authentication'
			sed 's|^#\?ChallengeResponseAuthentication .*$|ChallengeResponseAuthentication no|' -i /etc/ssh/sshd_config
			sed 's|^#\?PasswordAuthentication .*$|PasswordAuthentication no|' -i /etc/ssh/sshd_config
			sed 's|^#\?UsePAM .*$|UsePAM no|' -i /etc/ssh/sshd_config
		fi

		echo
		# Just wait a bit to show the result
		sleep 2
	fi

	INSTALLATIONSTATE='raspbianupdate'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Raspbian update
if [ "$INSTALLATIONSTATE" = 'raspbianupdate' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Upgrade Raspbian

The first thing that needs to be done is to upgrade all the software packages of
your freshly installed Raspbian to their latest versions.

\e[1mPress Q to quit, S to skip or any other key to update your Raspbian installation\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo
		echo
		apt-get update
		apt-get -y dist-upgrade

		echo
		# Just wait a bit to show the result
		sleep 2
	fi

	INSTALLATIONSTATE='settings'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# General settings
if [ "$INSTALLATIONSTATE" = 'settings' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
General settings

ToDo

\e[1mPress Q to quit, S to skip or any other key to ToDo\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo
		# Change hostname
		if grep -q '^raspberrypi$' /etc/hostname; then
			echo
			echo 'Updating hostname'
			echo 'wlanderlust' > /etc/hostname
			sed 's|raspberrypi|wlanderlust|g' -i /etc/hosts
		fi

		echo
		echo 'Installing VPN packages'
		apt-get install -y openvpn pptp-linux
		update-rc.d -f openvpn remove

		echo
		# Just wait a bit to show the result
		sleep 2
	fi

	INSTALLATIONSTATE='hostaccesspoint'
	#ToDo INSTALLATIONSTATE='rtc'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Real Time Clock
if [ "$INSTALLATIONSTATE" = 'rtc' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Real Time Clock

ToDo

\e[1mPress Q to quit, S to skip or any other key to configure your Real Time Clock\e[0m'
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit
	#if [ "$CHOICE" = 's' ] && [ "$CHOICE" = 'S' ]; then
	#fi

	INSTALLATIONSTATE='gps'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# GPS
if [ "$INSTALLATIONSTATE" = 'gps' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
GPS

ToDo

\e[1mPress Q to quit, S to skip or any other key to configure your GPS\e[0m'
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit
	#if [ "$CHOICE" = 's' ] && [ "$CHOICE" = 'S' ]; then
	#fi
	
	INSTALLATIONSTATE='hostaccesspoint'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Host Access Point Configuration
# I basically automated these instructions: https://www.raspberrypi.org/documentation/configuration/wireless/access-point.md
if [ "$INSTALLATIONSTATE" = 'hostaccesspoint' ]; then
	clear
	echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Host Access Point configuration

We're now going to configure your device as an Access Point, so you can
connect to it and continue the installation of WLANderlust from there.

We're going to detect the WiFi interface you want to use for the Access Point,
to make this possible it's easiest to remove the WiFi interfaces you don't want
to be configured as an Access Point now.

\e[1mPress Q to quit, S to skip or any other key to configure the Host Access Point\e[0m "
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		if [ -s /etc/hostapd/hostapd.conf ]; then
			# Read the current Host AP configuration
			HOSTAPDCONF=`cat /etc/hostapd/hostapd.conf`
			HOSTAPINTERFACE=`sed -n 's|^interface=\(.*\)$|\1|p' <<< "$HOSTAPDCONF"`
			HOSTAPSSID=`sed -n 's|^ssid=\(.*\)$|\1|p' <<< "$HOSTAPDCONF"`
			HOSTAPPASSPHRASE=`sed -n 's|^wpa_passphrase=\(.*\)$|\1|p' <<< "$HOSTAPDCONF"`
		else
			# Generate a somewhat unique name for the Host AP
			HOSTAPSSID='WLANderlust_'`shuf -i 1000-9999 -n 1`
		fi

		echo
		echo
		echo 'Available interfaces for your Host Access Point'
		mapfile -t WLANINTERFACES < <(ifconfig -a | sed -n 's|^\(wlan[0-9]*\):.*|\1|p')
		CHOICE=''
		for I in ${!WLANINTERFACES[@]}; do
			WLANINTERFACE=${WLANINTERFACES[$I]}
			printf '%2d %s\n' "$I" "$WLANINTERFACE"
			if [ "${WLANINTERFACES[$I]}" = "$HOSTAPINTERFACE" ]; then
				CHOICE="$I"
			fi
		done
		while true; do
			read -p 'Select the interface you would like to use: ' -e -i "$CHOICE" 'CHOICE'
			echo -n "$CHOICE" | egrep -q "^[0-9]+$" && [ ! -z "${WLANINTERFACES[$CHOICE]}" ] && break
		done
		HOSTAPINTERFACE="${WLANINTERFACES[$CHOICE]}"
		HOSTAPMACADDRESS=`ifconfig "$HOSTAPINTERFACE" | sed -n 's|^\s*ether\s*\(\S*\).*$|\1|p'`
		if [ -f "/etc/network/interfaces.d/$HOSTAPINTERFACE" ]; then
			HOSTAPIPADDRESS=`sed -n 's|^\s*address\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$HOSTAPINTERFACE"`
			HOSTAPNETMASK=`sed -n 's|^\s*netmask\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$HOSTAPINTERFACE"`
			HOSTAPNETWORK=`sed -n 's|^\s*network\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$HOSTAPINTERFACE"`
			HOSTAPBROADCAST=`sed -n 's|^\s*broadcast\s*\(\S*\).*$|\1|p' "/etc/network/interfaces.d/$HOSTAPINTERFACE"`
			HOSTAPNETWORKOCTET=`sed -n 's|^[0-9]*\.[0-9]*\.\([0-9]*\)\.[0-9]*$|\1|p' <<< "$HOSTAPIPADDRESS"`
		#ToDo elif grep -q "^interface $HOSTAPINTERFACE" /etc/dhcpcd.conf; then
		#ToDo elif grep -q "^denyinterfaces $HOSTAPINTERFACE" /etc/dhcpcd.conf; then
		else
			# We take a number between 128 and 254 to create an IP range for the accesspoint
			HOSTAPNETWORKOCTET=`shuf -i 128-254 -n 1`
			HOSTAPIPADDRESS="192.168.$HOSTAPNETWORKOCTET.1"
			HOSTAPNETMASK='255.255.255.0'
			HOSTAPNETWORK="192.168.$HOSTAPNETWORKOCTET.0"
			HOSTAPBROADCAST="192.168.$HOSTAPNETWORKOCTET.255"
		fi
		read -p 'SSID: ' -e -i "$HOSTAPSSID" 'HOSTAPSSID'
		#ToDo Check SSID length, max 32 characters
		while true; do
			read -p "WPA Passphrase: " -e -i "$HOSTAPPASSPHRASE" 'HOSTAPPASSPHRASE'
			# Check passphrase length, 8 to 63 charactrs
			echo -n "$HOSTAPPASSPHRASE" | egrep -q "^.{8,}$" && break
		done

		echo -n -e "
Host Access Point configuration summary
Interface: $HOSTAPINTERFACE
MAC Address: $HOSTAPMACADDRESS
IP Address: $HOSTAPIPADDRESS
Netmask: $HOSTAPNETMASK
Broadcast: $HOSTAPBROADCAST
SSID: $HOSTAPSSID
WPA Passphrase: $HOSTAPPASSPHRASE
\e[1mPress Q to quit, S to skip or any other key to use these settings\e[0m "
		read -n 1 -s 'CHOICE'
		([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit
	fi

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		if [ ! -f /usr/sbin/hostapd ]; then
			echo
			echo 'Installing required packages for your Host Access Point'
			apt-get install -y dnsmasq hostapd
			systemctl stop dnsmasq
			systemctl stop hostapd
		fi

		# Add hostap interface to /etc/udev/rules.d/10-network.rules
		if [ ! -z "$HOSTAPMACADDRESS" ] && ! grep -q "$HOSTAPMACADDRESS" /etc/udev/rules.d/10-network.rules; then
			echo "KERNEL==\"wlan?\", ATTR{address}==\"$HOSTAPMACADDRESS\", NAME=\"$HOSTAPINTERFACE\"" >> /etc/udev/rules.d/10-network.rules
		fi

		#ToDo Disable DHCPd

		# Configure /etc/network/interfaces.d/HOSTAPINTERFACE
		if [ ! -f "/etc/network/interfaces.d/$HOSTAPINTERFACE" ]; then
			cat << EOF > "/etc/network/interfaces.d/$HOSTAPINTERFACE"
allow-hotplug $HOSTAPINTERFACE
iface $HOSTAPINTERFACE inet static
	address $HOSTAPIPADDRESS
	netmask $HOSTAPNETMASK
	network $HOSTAPNETWORK
	broadcast $HOSTAPBROADCAST
EOF
		fi

		# Configure /etc/dhcpcd.conf
		if ! grep -q "^interface $HOSTAPINTERFACE" /etc/dhcpcd.conf && ! grep -q "^denyinterfaces $HOSTAPINTERFACE" /etc/dhcpcd.conf; then
			echo -e "\ndenyinterfaces $HOSTAPINTERFACE" >> /etc/dhcpcd.conf
		fi

		echo
		echo 'Configuring Host Access Point...'
		# dnsmasq
		if ! grep -q "^interface=$HOSTAPINTERFACE" /etc/dnsmasq.conf; then
			cat << EOF >> /etc/dnsmasq.conf

interface=$HOSTAPINTERFACE
  dhcp-range=192.168.$HOSTAPNETWORKOCTET.20,192.168.$HOSTAPNETWORKOCTET.254,255.255.255.0,24h
EOF
		fi

		# hostapd
		if [ -s /etc/hostapd/hostapd.conf ]; then
			HOSTAPDCONF=`sed "s|^interface=.*$|interface=$HOSTAPINTERFACE|;s|^ssid=.*$|ssid=$HOSTAPSSID|;s|^wpa_passphrase=.*$|wpa_passphrase=$HOSTAPPASSPHRASE|" /etc/hostapd/hostapd.conf`
		else
			HOSTAPDCONF="interface=$HOSTAPINTERFACE
driver=nl80211
ssid=$HOSTAPSSID
hw_mode=g
channel=7
wmm_enabled=0
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=$HOSTAPPASSPHRASE
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP"
		fi
		# Check if HOSTAPDCONF and /etc/hotapd/hostapd.conf differ
		if ! echo "$HOSTAPDCONF" | diff -q /etc/hostapd/hostapd.conf - > /dev/null; then
			mv /etc/hostapd/hostapd.conf /etc/hostapd/hostapd.conf.old
			echo "$HOSTAPDCONF" > /etc/hostapd/hostapd.conf
		fi

		# /etc/default/hostapd
		sed 's|^#\?DAEMON_CONF=.*$|DAEMON_CONF="/etc/hostapd/hostapd.conf"|' -i /etc/default/hostapd

		#ToDo /etc/avahi/avahi-daemon.conf 

		if $ISREMOTELOGIN; then
			echo
			# Just wait a bit to show the result
			sleep 2

			clear
			echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Host Access Point configuration

Your Access Point is now configured. You need to restart your Rasperry Pi and
continue the installation by executing the installation script again. The
script will recognise where it has stopped and continue with the next step.

Reconnect to your WLANderlust Access Point using the following credentials:
SSID: $HOSTAPSSID
Passphrase: $HOSTAPPASSPHRASE
URL: pi@wlanderlust.local or pi@$HOSTAPIPADDRESS
\e[1mPress Q to quit or any other key to restart your device\e[0m "
			read -n 1 -s 'CHOICE'
			([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit

			INSTALLATIONSTATE='wpa_supplicant'
			echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
			reboot
		else
			# Restart Host AP interface
			# I have not tested this as I always connect remotely
			ifdown "$HOSTAPINTERFACE"
			ifup "$HOSTAPINTERFACE"
			systemctl start hostapd
			systemctl start dnsmasq

			echo
			# Just wait a bit to show the result
			sleep 2
		fi
	fi

	INSTALLATIONSTATE='wpa_supplicant'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

if [ "$INSTALLATIONSTATE" = 'wpa_supplicant' ]; then
	clear
	if $ISREMOTELOGIN; then
		echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
WiFi Roaming configuration

Welcome back! We're now going to configure your device to connect to other
Access Points

We're going to detect the WiFi interface you want to use to connect to other
Access Points.

\e[1mPress Q to quit, S to skip or any other key to configure WiFi roaming\e[0m "
	else
		echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
WiFi Roaming configuration

Your Host Access Point is now configured. We're now going to configure your device to
connect to other Access Points.

\e[1mPress Q to quit, S to skip or any other key to configure WiFi roaming\e[0m "
	fi
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		if [ -f /etc/hostapd/hostapd.conf ]; then
			HOSTAPINTERFACE=`cat /etc/hostapd/hostapd.conf | sed -n 's|^interface=\(.*\)$|\1|p'`
		fi

		echo
		echo
		echo 'Available interfaces for'
		mapfile -t WLANINTERFACES < <(ifconfig -a | sed -n 's|^\(wlan[0-9]*\):.*|\1|p' | sed "/$HOSTAPINTERFACE/d")
		CHOICE=''
		for I in ${!WLANINTERFACES[@]}; do
			WLANINTERFACE=${WLANINTERFACES[$I]}
			printf '%2d %s\n' "$I" "$WLANINTERFACE"
			if [ -f "/etc/network/interfaces.d/$WLANINTERFACE" ] && grep -q 'wpa_supplicant.WLANderlust.conf' "/etc/network/interfaces.d/$WLANINTERFACE"; then
				CHOICE="$I"
			fi
		done
		while true; do
			read -p 'Select the interface you would like to use: ' -e -i "$CHOICE" 'CHOICE'
			echo -n "$CHOICE" | egrep -q "^[0-9]+$" && [ ! -z "${WLANINTERFACES[$CHOICE]}" ] && break
		done
		WLANDERLUSTINTERFACE="${WLANINTERFACES[$CHOICE]}"
		WLANDERLUSTMACADDRESS=`ifconfig "$WLANDERLUSTINTERFACE" | sed -n 's|^\s*ether\s*\(\S*\)\s*.*$|\1|p'`

		echo
		echo -n -e "WLANderlust configuration summary
Interface: $WLANDERLUSTINTERFACE
MAC Address: $WLANDERLUSTMACADDRESS
\e[1mPress Q to quit, S to skip or any other key to use these settings\e[0m "
		read -n 1 -s 'CHOICE'
		([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit
	fi

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		ifdown "$WLANDERLUSTINTERFACE"

		# Add WLANderlust interface to /etc/udev/rules.d/10-network.rules
		if ! grep -q "$WLANDERLUSTMACADDRESS" /etc/udev/rules.d/10-network.rules; then
			echo "KERNEL==\"wlan?\", ATTR{address}==\"$WLANDERLUSTMACADDRESS\", NAME=\"$WLANDERLUSTINTERFACE\"" >> /etc/udev/rules.d/10-network.rules
		fi

		# Configure /etc/network/interfaces.d/WLANDERLUSTINTERFACE
		if [ ! -f "/etc/network/interfaces.d/$WLANDERLUSTINTERFACE" ]; then
			cat << EOF > "/etc/network/interfaces.d/$WLANDERLUSTINTERFACE"
allow-hotplug $WLANDERLUSTINTERFACE
iface $WLANDERLUSTINTERFACE inet manual
	wpa-roam /etc/wpa_supplicant/wpa_supplicant.WLANderlust.conf
EOF
		fi

		if [ ! -f /etc/wpa_supplicant/wpa_supplicant.WLANderlust.conf ]; then
			cat << EOF > /etc/wpa_supplicant/wpa_supplicant.WLANderlust.conf
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=GR

network={
	key_mgmt=NONE
	priority=-100
}
EOF
		fi

		if [ ! -f "/etc/wpa_supplicant/wpa_supplicant-$WLANDERLUSTINTERFACE.conf" ]; then
			ln -s wpa_supplicant.WLANderlust.conf "/etc/wpa_supplicant/wpa_supplicant-$WLANDERLUSTINTERFACE.conf"
		fi

		#ToDo /etc/dhcp/dhclient.conf

		ifup "$WLANDERLUSTINTERFACE"

		echo
		# Just wait a bit to show the result
		sleep 2
	fi

	INSTALLATIONSTATE='WLANderlust'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

if [ "$INSTALLATIONSTATE" = 'WLANderlust' ] || [ "$INSTALLATIONSTATE" = 'update' ]; then
	clear
	echo -n -e "\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
WLANderlust installation

Your device is now configured to connect to open Access Points.

Now it's finally time to install the WLANderlust scripts

\e[1mPress Q to quit, S to skip or any other key to install WLANderlust\e[0m "
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo
		echo
		echo 'Installing WLANderlust'
		DIR='/usr/local/lib/WLANderlust/captiveportal.d/'
		[ ! -d "$DIR" ] && mkdir -p "$DIR" && echo -n '.'
		DIR='/usr/local/lib/WLANderlust/vpn.d/'
		[ ! -d "$DIR" ] && mkdir -p "$DIR" && echo -n '.'
		DIR='/usr/local/lib/WLANderlust/firewall.d/'
		[ ! -d "$DIR" ] && mkdir -p "$DIR" && echo -n '.'
		find usr/local/lib/WLANderlust -type f -print0 | while IFS= read -r -d '' FILE; do
			if [ ! -f "/$FILE" ] || ! diff -q "$FILE" "/$FILE" > /dev/null; then
				echo "Installing /$FILE"
				cp --preserve=mode,timestamps "$FILE" "/$FILE"
			fi
		done
		find /usr/local/lib/WLANderlust -type f -print0 | while IFS= read -r -d '' FILE; do
			if [ ! -f ".$FILE" ] && grep -q "^# WLANderlust" "$FILE"; then
				echo "Removing $FILE"
				rm "$FILE"
			fi
		done

		FILE='usr/local/bin/WLANderlust'
		if [ ! -f "/$FILE" ] || ! diff -q "$FILE" "/$FILE" > /dev/null; then
			echo "Installing /$FILE"
			cp --preserve=mode,timestamps "$FILE" "/$FILE"
		fi
		echo

		# Copy newer versions of the DHCP hooks
		echo 'Installing DHCP client hooks'
		find etc/dhcp/dhclient-*-hooks.d/ -type f -name '[0-9][0-9]-*' -print0 | while IFS= read -r -d '' FILE; do
			if [ ! -f "/$FILE" ] || ! diff -q "$FILE" "/$FILE" > /dev/null; then
				echo "Installing /$FILE"
				cp --preserve=mode,timestamps "$FILE" "/$FILE"
			fi
		done
		# Remove old DHCP hooks
		find /etc/dhcp/dhclient-*-hooks.d/ -type f -name '[0-9][0-9]-*' -print0 | while IFS= read -r -d '' FILE; do
			if [ ! -f ".$FILE" ] && grep -q "^# WLANderlust" "$FILE"; then
				echo "Removing $FILE"
				rm "$FILE"
			fi
		done

		echo
		# Just wait a bit to show the result
		sleep 2
	fi

	[ "$INSTALLATIONSTATE" = 'update' ] &&
		INSTALLATIONSTATE='finished installation' ||
		INSTALLATIONSTATE='adduser'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

# Add WLANderlust user with same password as pi
if [ "$INSTALLATIONSTATE" = 'adduser' ]; then
	clear
	echo -n -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Add WLANderlust user

ToDo

\e[1mPress Q to quit, S to skip or any other key to update your Raspbian installation\e[0m '
	read -n 1 -s 'CHOICE'
	([ "$CHOICE" = 'q' ] || [ "$CHOICE" = 'Q' ]) && echo && exit

	if [ "$CHOICE" != 's' ] && [ "$CHOICE" != 'S' ]; then
		echo
		echo
		if ! grep -q '^wlanderlust:' /etc/passwd; then
			echo 'Creating user wlanderlust'
			adduser --disabled-password --gecos '' wlanderlust
			# Change password to pi's one
			PIPASSWD=`sed -n 's|^pi:\([^:]*\):.*$|\1|p' /etc/shadow`
			sed "s|^\(wlanderlust:\)[^:]*\(:.*\)$|\1$PIPASSWD\2|" -i /etc/shadow
		fi

		if [ ! -s ~pi/.ssh/authorized_keys ]; then
			echo 'Installing SSH authorized keys for wlanderlust user'
			mkdir -p ~wlanderlust/.ssh
			cp ~pi/.ssh/authorized_keys ~wlanderlust/.ssh/
			chown -R wlanderlust:wlanderlust ~wlanderlust/.ssh
		fi

		if ! grep -x 'WLANderlust' ~wlanderlust/.profile; then
			echo 'Auto start WLANderlust for wlanderlust user'
			echo -e '\nsudo /usr/local/bin/WLANderlust; exit' >> ~wlanderlust/.profile
		fi

		if [ ! -f /etc/sudoers.d/wlanderlust ]; then
			echo 'wlanderlust ALL=(ALL) NOPASSWD: /usr/local/bin/WLANderlust' > /etc/sudoers.d/wlanderlust
			chmod --reference=/etc/sudoers /etc/sudoers.d/wlanderlust
		fi

		echo
		# Just wait a bit to show the result
		sleep 2
	fi

	INSTALLATIONSTATE='finished installation'
	echo "$INSTALLATIONSTATE" > '.installWLANderlust.state'
fi

clear
echo -e '\e[1mWLANderlust
\e[2mNot all those who WLANder have lost connection
\e[0m
Success!

Congratulations, WLANderlust is now successfully installed!'
exit

#ToDo Create first connection
